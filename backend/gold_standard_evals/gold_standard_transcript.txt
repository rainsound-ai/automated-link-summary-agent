The following is a conversation with the founding members of the cursor team: michael truell, swall oif arvid lunark and aman sanger. Cursor is a code editor based on vss code that adds a lot of powerful features for ai assisted coding. It has captivated the attention and excitement of the programming and ai communities, so i thought this is an excellent opportunity to dive deep into the role of ai in programming. This is a super technical conversation that is bigger than just about one code editor. It's about the future of programming and, in general, the future of human ai collaboration in designing and engineering complicated and powerful systems. This is le freedman podcast. To support it, please check out our sponsors in the description. And now, dear friends, here's michael suale arvid and aman. All right, this is awesome. We have michael aman suali arvid here from the cursor team. First up, big, ridiculous question: what's the point of a code editor? So the, the code editor, is largely the place where you build software and today, or for a long time, that's meant the place where you text edit- uh, a formal programming language. And for people who aren't programmers, the way to think of a code editor is like a really souped up word processor for programmers, where the reason it's, it's souped up, is code has a lot of structure, and so the the quote, unquote word processor, the code editor, can actually do a lot for you that word processors you know sort of in the writing space haven't been able to do for for people editing text there, and so you know that's everything from giving you visual differentiation of like the actual tokens in the code to so you can like scan it quickly, to letting you navigate around the code base, sort of like you're navigating around the internet with like hyperlinks.

You're going to sort of definitions of things you're using, to error checking um to you know, to catch rudimentary b? Um, and so traditionally that's what a code editor has meant, and i think that what a code editor is is going to change a lot over the next 10 years, um, as what it means to build software maybe starts to look a bit different. I i think also, code edor should just be fun. Yes, that is very important. That is very important, and it's actually sort of an underated aspect of how we decide what to build, like a lot of the things that we build and then we we try them out, we do an experiment and then we actually throw them out because they're not fun and and so a big part of being fun is like being fast. A lot of the time fast is fun, yeah, fast is uh. Yeah, that should be a t-shirt like like: fundamentally, i think one of the things that draws a lot of people to to building stuff on computers is this like insane integration speed where you know in other disciplines you might be sort of gate capped by resources or or the ability, even the ability you know to get a large group together and coding is just like amazing thing. Where it's you and the computer and, uh, that alone you can. You can build really cool stuff really quickly. So for people don't know, cursor is this super cool new editor that's a fork of vs code. It would be interesting to get your kind of explanation of your own journey of editors. How did you- i think all of you are- were big fans of vs code with co-pilot, how did you arrive to vss code and how did that lead to your journey with cursor? Yeah, um, so i think a lot of us- well all of us- originally vim users: pure, pure vi, pure vim- yeah, no, neo, just pure vim in a terminal and at le- at least for myself, it was around the time that c- pilot came out, so 2021 that i really wanted to try it.

So i went into vs code, the only platform, the only code editor, in which it was available, and even though i, you know, really enjoyed using vim, just the experience of co-pilot with, with vs code was more than good enough to convince me to switch, and so that kind of was the default until we started working on cursor and, uh, maybe we should explain what copala does. It's like a really nice autocomplete. It suggests, as you start writing a thing, it suggests one or two or three lines how to complete the thing, and there's a fun experience in that, you know, like when you have a close friendship and your friend completes your sentences, like when it's done well, there's an intimate feeling- uh, there's probably a better word than intimate, but there's a. there's a cool feeling of like, holy, it gets me now. And then there's an unpleasant feeling when it doesn't get you, uh, and so there's that, that kind of friction, but i would say, for a lot of people, the feeling that it gets me over powers that it doesn't. And i think actually one of the underrated aspects of get up copet is that, even when it's wrong is it's like a little bit annoying but it's not that bad, because you just type another character and then maybe then it gets you, or you type another character and then then it gets you. So even when it's wrong, it's not that bad. Yeah, you, you can sort of iterate, iterate and fix it. I mean, the other underrated part of uh, calot for me sort of was just the first real, real ai product. It's like the first language model consumer product.

So copile was kind of like the first killer app for lms, yeah, and like the beta was out in 2021, right, okay, mhm, uh, so what's the? The origin story of cursor? So around 2020, the scaling loss papers came out from from open ai, and that was a moment where this looked like clear, predictable progress for the field, where, even if we didn't have any more ideas, looked like you could make these models a lot better if you had more computer and more data. Uh, by the way, we'll probably talk uh for three to four hours on on the topic of scaling laws, but just just to summarize, it's a paper and a set of papers and set of ideas that say bigger might be better for model size and data size in the in the realm of machine learning it's bigger and better, but predictively better. Okay, this another topic of conversation, but anyway, yeah, so around that time for some of us there were like a lot of conceptual conversations about what's this going to look like, what's the the story going to be for all these different knowledge worker fields, about how they're going to be um made better, u by this technology getting better and then, um, i think there were a couple of moments where, like the theoretical gains predicted in that paper uh started to feel really concrete and it started to feel like a moment where you could actually go and not, you know, do a phd if you wanted to work on uh, do useful work in ai- actually felt like now there was this, this whole set of systems one could built that were really useful. And i think that the first moment we already talked about a little bit, which was playing with the early bit of copell, like that was awesome and magical. Um, i think that the next big moment where everything kind of clicked together was actually getting early access to gbd4, so sort of end of 2022, was when we were um tinkering with that model and the step up in capabilities felt enormous. And previous to that, we had been working on a couple of different projects.

We had been um because of co-pilot, because of scaling laws, because of our prior interest in the technology. We had been, uh, tinkering around with tools for programmers, but things that are like very specific. So, you know, we were building tools for, uh, financial professionals who have to work with in a juper notebook or, like you know, playing around with. Can you do static analysis with these models? And then the step up in gbd4 felt like, look, that really made concrete the theoretical gains that, um, we had predicted before, felt like you could build a lot more just immediately at that point in time and also, if we were being consistent, it really felt like, um, this wasn't just going to be a point solution thing, this was going to be all of programming was going to flow through these models. It felt like that demanded a different type of programming environment to different type of programming, and so we set off to build that, that sort of larger vision around. Then there's one that i distinctly remember. So my roommate is an imo gold winner and, uh, there's a competition in the us called of putam, which is sort of the imo for college people, and it's, it's this math competition is. He's exceptionally good. So shang tong and aman- i remember it sort of june, june of 2022- had this bet on whether the mo, like 2024 june or july, you were going to win a gold medal in the imo with the with like models. Imo is international math olympiad. Uh, yeah, imo is international math olympiad and so arvid and i are, both of you know, also competed in it, so was sort of personal and uh, and i, i remember thinking matt is just, this is not going to happen. This was like it, un like, even though i i sort of believed in progress, i thought, you know, i'm a girl just like aman is just delusional. That was the, that was the and, and, to be honest, i mean i, i was, to be clear, it very wrong, but that was maybe the most preent bet in the group.

So the, the new results from deep mind. It turned out that you were correct. That's what. Well, it technically not technically incorrect. But one point: awayan was very enthusiastic about this stuff back then and before. Aman had this like scaling loss t-shirt that he would walk around with, where it had like charts and like the formulas on it. Oh, so you like felt the ai or you felt the scaling. Yeah, i, i l remember there was this one conversation uh i had with with michael where before i hadn't thought super deeply and critically about scaling laws and he kind of posed the question: why isn't scaling all you need, or why isn't scaling going to result in massive gains in progress? And i think i went through like the like the stages of grief, there is anger, denial, and then finally, at the end, just thinking about it, uh, acceptance, um, and i think i've been quite hopeful and uh optimistic about progress since i think one thing i'll caveat is i think it also depends on like which domains you're going to see progress. Like math is a great domain because, especially like formal theor improving, because you get this fantastic signal of actually verifying if the thing was correct, and so this means something like rl can work really, really well, and i think like you could have systems that are perhaps very superhuman in math and still not technically have ai. Okay, so can we take it off all the way to cursor mhm and what is cursor? It's a fork of vs code and vss code is one of the most popular editors for a long time. Like everybody fell in love with it. Everybody left vim, i left dmax for it, sorry, uh, uh. So it unified in some fun, fundamental way, the, uh, the developer community.

And then that you look at the space of things, you look at the scaling laws- ai is becoming amazing- and you decide, decided, okay, it's not enough to just write an extension, fe vs code, because there's a lot of limitations to that we we need, if ai is going to keep getting better and better and better, we need to really like rethink how the, the ai, is going to be part of the editing process. And so you decided to fork vs code and start to build a lot of the amazing features we'll be able to to to talk about. But what was that decision like? Because there's a lot of extensions, including co-pilot of vs code, that are doing so ai type stuff. What was the decision like? To just fork vs code? So the decision to do an editor seemed kind of self-evident to us, for at least what we wanted to do and achieve. Because when we started working on the editor, the idea was: these models are going to get much better, their capabilities are going to improve and it's going to entirely change how you build software. Both in a, you will have big productivity gains, but also radical in how. Like the active building software is going to change a lot, and so you're very limited in the control you have over a code editor if you're a plugin to an existing coding environment. Um, and we didn't want to get locked in by those limitations. We wanted to be able to um, just build the most useful stuff, okay. Well then the natural question is: you know, vss code is kind of with copilot, a competitor, so how do you win is? Is it basically just the speed and the quality of the features? Yeah, i mean, i think this is a space that is quite interesting, perhaps quite unique, where, if you look at previous tech waves, maybe there's kind of one major thing that happened and unlocked a new wave of companies, but every single year, every single model capability- uh, or jump, you get model capabilities.

You now unlock this new wave of features, things that are possible, especially in programming, and so i think in ai programming, being even just a few months ahead, let alone a year ahead, makes your product much, much, much more useful. I think the cursor a year from now will need to make the cursor of today look obsolete, and i think you know, microsoft has' done a number of like, fantastic things, but i don't think they're in a great place to really keep innovating and pushing on this in the way that a startup can just rapidly implementing features and and push, yeah, like, and and kind of doing the research, experimentation necessary, um, to really push the ceiling. I don't. I don't know if i think of it in terms of features, as i think of it in terms of like capabilities for for programmers. It's that, like you know, as you know, the new one model came out and i'm sure there are going to be more, more models of different types, like longer context and maybe faster. Like there's all these crazy ideas that you can try and hopefully 10% of the crazy ideas will make it into something kind of cool and useful and, uh, we want people to have that sooner. To rephrase, it's like an underrated fact- is we're making it for oursel. When we started cursor, you really felt this frustration that you know models. You could see models getting better, uh, but the coall experience had not changed. It was like man, these, these guys, like the steing is getting higher, like why are they not making new things? Like they should be making new things, they should be like you like like where's, where's, where's all the alpha features there? There were no alpha features. It was like: uh, i i'm sure it it was selling well, i'm sure it was a great business, but it didn't feel i i'm i'm one of these people that really want to try and use new things and was just there's no new thing for like a very long while. Yeah, it's interesting.

Uh, i don't know how you put that into words, but when you compare a cursor with copilot, copilot pretty quickly became started to feel stale for some reason. Yeah, i think one thing that i think uh helps us is that we're sort of doing it all in one, where we're developing the, the ux, and the way you interact with the model, and at the same time as we're developing like how we actually make the model give better answers. So like how you build up the, the prompt, or or like how do you find the context? And for a cursor tab, like how do you train the model? Um, so i think that helps us to have all of it like sort of like the same people working on the entire experience on end. Yeah, it's like the, the person making the ui and the person training the model, like sit to like 18 ft away, so often the same person, even, yeah, often, often even the same person. So you, you can you create things that that are sort of not possible. If you're not, you're not talking, you're not experimenting and you're using, like you said, cursor to write, cursor, of course, oh yeah, yeah. Well, let's talk about some of these features. Let's talk about the all- knowing, the all powerful. Praise b to the tab, so the you know, autocomplete on steroids. Basically. So what? How does tab work? What is tab? To highlight and summarize it: a high level. I'd say that there are two things that curser is pretty good at right now. There. There are other things that it does, um, but two things it it helps programmers with. One is this idea of looking over your shoulder and being like a really fast colleague who can kind of jump ahead of you and type and figure out what you're, what you're going to do next, and that was the original idea behind. That was kind, kind of the kernel. The idea behind a good autocomplete was predicting what you're going to do next.

You can make that concept even more ambitious by not just predicting the characters after cursor, but actually predicting the next entire change you're going to make the next diff, the next place you're going to jump to, um, and the second thing cursor is is pretty good at right now too- is helping you sometimes jump ahead of the ai and tell it what to do and go from instructions to code, and on both of those we've done a lot of work on making the editing experience for those things ergonomic, um, and also making those things smart and fast. One of the things we really wanted was we wanted the model to be able to edit code for us. Uh, that was kind of a wish and we had multiple attempts at it. Before before we had a sort of a good model that could edit code for you u, then after, after we had a good model. I think there there have been a lot of effort to, you know, make the inference fast for you know, uh, having having a good, good experience and, uh, we've been starting to incorporate- i mean, michael sort of mentioned this like ability to jump to different places, and that jump to different places i think came from a feeling off, you know, once you, once you accept an edit, um was like man, it should be just really obvious where to go next. It's like it's, like i, i made this change. The model should just know that, like, the next place to go to is like 18 lines down, like, uh, if you're, if you're a whim user, you could press 18 jj or whatever, but like, why, why, even? Why am i doing this? Like the model? The model should just know it. And then so so the idea was you, you just press tab, it would go 18 lines down and then make it would show you, show you the next edit, and you would press tab. So it's just you, as long as you could keep pressing tab.

And so the internal competition was: how many tabs can we make them pressive? Once you have like the idea: uh, more, more, uh, sort of abstractly, the the thing to think about is sort of like once, how, how, how are the edit sort of zero, zero entropy. So once you' sort of expressed your intent and the edit is there's no like new bits of information to finish your thought, but you still have to type some characters to like make the computer understand what you're actually thinking, then maybe the model should just sort of read your mind and and all the zero entropy bits should just be like tabbed away. Yeah, that was, that was sort of the abstract. There's this interesting thing where, if you look at language, model loss on on different domains, um, i believe the bits per bite, which is kind of character normalized loss for code, is lower than language, which means in general, there are a lot of tokens in code that are super predictable, lot of characters that are super predictable, um, and this is, i think, even magnified when you're not just trying to autocomplete code but predicting what the user is going to do next in their editing of existing code. And so you know, the gold cursor tab is: let's eliminate all the low entropy actions you take inside of the editor. When the intent is effectively determined, let's just jump you forward in time, skip you forward, well. Well, what's the intuition and what's the technical details of how to do next cursor prediction? That jump, that's not. That's not so intuitive, i think, to people. Yeah, i think i can speak to a few of the details on how, how to make these things work. They're incredibly low latency, so you need to train small models on this, on this task. Um, in particular, they're incredibly pre-fill token hungry.

What that means is they have these really really long prompts where they see a lot of your code and they're not actually generating that many tokens, and so the perfect fit for that is using a sparse model, meaning ane, model, um. So that was kind of one one break, one breakthrough we made that substantially improved its performance at longer context, the other being um, a variant of speculative decoding that we, we kind of built out called speculative edits, um, these are two, i think, important pieces of what make it quite high quality um and very fast. Okay, soe mixture of experts. The input is huge, the output is small, yeah, okay. So like what? What? What else can you say about how to make it like? Caching play a role in this? Cashing plays a huge role. M? Um, because you're dealing with this many input tokens. If every single keystroke that you're typing in a given line, you had to rerun the model on all those tokens passed in, you're just going to one significantly deg grade latency. Two, you're going to kill your gpus with load. So you need to, you, you need to design the actual prompts use for the model such that they're cach, caching aware. And then, yeah, you need, you need to re use the kv cach across request, just so that you're spending less work, less compute. Uh, again, what are the things that tab is supposed to be able to do kind of in the near term? Just to like sort of linger on that. Generate code like fill empty space. Also, edit code across multiple lines: yeah, and then jump to different locations inside the same file, yeah, and then like, hopefully, jump to different files also. So if you make an edit in one file and maybe maybe you have to go, maybe you have to go to another file to finish your thought it should, it should go to the second file also, yeah, and then the full generalization is like: next next action: prediction.

Like sometimes you need to run a command in the terminal and it should be able to suggest the command based on the code that you wrote, too, um, or sometimes you actually need to like it suggest something, but you, you, it's hard for you to know if it's correct because you actually need some more information to learn. Like you need to know the type to be able to verify that it's correct, and so maybe it should actually take you to a place that's like the definition of something and then take you back so that you have all the requisite knowledge to be able to accept the next completion. Al, also providing the human, the knowledge. Yes, right, yeah, can you integrate like? I just uh gotten to know a guy named prime jen who i believe has an ss. You can order coffee via ssh, oh, yeah, oh, we did that, we did that. Uh, so can that also the model do that? Like feed you and like, yeah, and provide you with caffeine? Okay, so that's the general framework, yeah, and the. The magic moment would be, if it is programming, is this weird discipline where, um, sometimes the next five minutes- not always, but sometimes the next five minutes of what you're going to do- is actually predictable from the stuff you've done recently. And so can you get to a world where that next 5 minutes either happens by you disengaging and it taking you through, or maybe a little bit more of just you seeing, next step, what it's going to do, and you're like, okay, that's good, that's good, that's good, that's good, and you can just sort of tap, tap, tap through these big changes. As we're talking about this, i should mention, like, one of the really cool and noticeable things about cursor is that there's this whole diff interface situation going on. So, like the model suggests, with, uh, with the red and the green of, like, here's how we're going to modify the code and in the chat window you can apply and it shows you the diff and you can accept the diff.

So maybe can you speak to whatever direction of that. We'll probably have like four or five different kinds of diffs, uh. So we we have optimized the diff for for the autocomplete, so that has a different diff interface than uh. Then when you're reviewing larger blocks of code and then we're trying to optimize uh, another diff thing for when you're doing multiple different files, uh and and sort of at a high level, the difference is for when you're doing autocomplete, it should be really really fast to read. Uh, actually it should be really fast to read in all situations. But in autocomplete it sort of you're, you're really like your eyes focused in one area. You you can't be in too many. You, the humans, can't look in too many different places. So you're talking about on the interface side, like on the interface side. So it currently has this box on the side. So we have the current box and if it tries to delete code in some place and tries to add other code, it tries to show you a box on the. You can maybe show it if we pull it up on cursor comom- this is what we're talking about- so that it was like three or four different attempts at trying to make this, this thing, work, where first the attempt was like these blue crossed out line, so before it was a box on the side, it used to show you the code to delete by showing you like, uh, like google doc style, you would see like a line through it, then you would see the, the new code. That was super distracting. And then we tried many different. You know there was, there was sort of deletions, there was trying to red highlight. Then the next iteration of it, which is sort of funny, would you would hold the on mac, the option button, so it would. It would sort of highlight a region of code to show you that there might be something coming. Uh, so maybe in this example, like the input and the value uh would get would all get blue and the blue would to highlight that the ai had a suggestion for you.

Uh, so instead of directly showing you the thing, it would show you that the ai, it would just hint that the ai had a suggestion and if you really wanted to see it, you would hold the option button and then you would see the new suggestion. Then, if you release the option button, you would then see your original code, mhm. So that's, by the way, that's pretty nice, but you have to know to hold the option button. Yeah, i, by the way, i'm not a mac user, but i got it, it was, it was, it's a button, i guess you people it's h, you know it's again, it's just, it's just nonintuitive. I think that's the. That's the key thing and there's a chance this- this is also not the final version of it. I am personally very excited for um making a lot of improvements in this area. Like uh, we- we often talk about it as the verification problem where u these diffs are great for small edits, uh, for large edits or like when it's multiple files or something. It's um actually a little bit prohibitive to to review these diffs and uh, uh. So there are like a couple of different ideas here. Like one idea that we have is: okay, you know, like parts of the diffs are important, they have a lot of information, and then parts of the diff um are just very low entropy. They're like exam, like the same thing over and over again, and so maybe you can highlight the important pieces and then gray out the, the not so important pieces, or maybe you can have a model that uh looks at the, the diff, and and sees, oh, there's a likely bug here. I will like mark this with a little red squiggly and say, like you should probably like review this part of the diff, um, and ideas in in that vein i think are exciting. Yeah, that's a really fascinating space of, like ux design engineering. So you're basically trying to guide the human programmer through all the things they need to read and nothing more. Yeah, like optimally. Yeah, and you want an intelligent model to do it.

Like ly, diffs, al diff algorithms are, they're like al like, they're just like normal algorithms. Uh, there's no intelligence. Uh, there's like intelligence that went into designing the algorithm, but then there, there's no. Like you don't care if the, if it's about this thing or this thing, uh, and so you want a model to to do this. So i think the, the. The general question is: like: m, these models are going to get much smarter. As the models get much smarter, uh, the, the changes they will be able to propose are much bigger. So as the changes gets bigger and bigger and bigger, the humans have to do more and more and more verification work. It gets more and more, more hard, like it's just you need, you need to help them out, it sort of. I i don't want to spend all my time reviewing code. Uh, can you say a little more across multiple files, div, yeah, i mean. So github tries to solve this right with code review. When you're doing code review, you're reviewing multiple deaths, cross multiple files. But, like arvid said earlier, i think you can do much better than code review. You know, code review kind of sucks. Like you spend a lot of time trying to grock this code that's often quite unfamiliar to you and it often like, doesn't even actually catch that many bugs. And i think you can signific significantly improve that review experience using language models, for example, using the kinds of tricks that ar had described of maybe, uh, pointing you towards the regions that matter. Um, i think also, if the code is produced by these language models, uh, and it's not produced by someone else, like the code, review experience is designed for both the reviewer and the person that produced the code. In the case where the person that produced the code is a language model, you don't have to care that much about their experience and you can design the entire thing around the reviewer such that the reviewer's job is as fun, as easy, as productive as possible.

Um, and i think that that feels like the issue with just kind of naively trying to make these things look like code review. I think you can be a lot more creative and and push the boundary and what's possible. Just one, one idea there is, i think, ordering matters generally. When you review a pr, you you have this list of files and you're reviewing them from top to bottom, but actually, like you actually want to understand this part first, because that came like logically first, and then you want understand the next part and, um, you don't want to have to figure out that yourself. You want a model to guide you through the thing. And is the step of creation going to be more and more natural language? Is the goal versus with actual? Uh, i think sometimes i don't think it's going to be the case that all of programming will be natural language, and the reason for that is, you know, if i'm pr, programming with swalla and swall is at the computer and the keyboard, uh, and sometimes if i'm like driving, i want to say to swallet, hey, like implement this function and that that works. And then sometimes it's just so annoying to explain to swalla what i want him to do, and so i actually take over the keyboard and i show him, i i write like part of the example, and then it makes sense and that's the easiest way to communicate. And so i think that's also the case for ai. Like, sometimes the easiest way to communicate with the ai will be to show an example and then it goes and does the thing everywhere else. Or sometimes, if you're making a website, for example, the easiest way to show to the a what you want is not to tell it what to do, but, you know, drag things around or draw things um and yeah and and like maybe eventually we will get to like brain machine interfaces or whatever and can of like understand what you're thinking, and so i think natural language will have a place. I think it will not definitely not be the way most people program most of the time.

I'm really feeling the agi with this editor. Uh, it feels like there's a lot of machine learning going on underneath. Tell, tell me about some of the ml stuff that makes it all work. Recursor really works via this ensemble of custom models, that that that we've trained alongside. You know the frontier models that are fantastic at the reasoning, intense things, and so cursor tab, for example, is is a great example of where you can specialize this model to be even better than even frontier models. If you look at evls on on the, on the task we set it at the other domain- which it's kind of surprising that it requires custom models but but it's kind of necessary and works quite well- is in apply, um. So i think these models are like the frontier models are quite good at sketching out plans for code and generating like rough sketches of like the change. But actually creating diffs is quite hard, um, for frontier models, for your training models, um, like you try to do this with sonet, with 01, any frontier model and it it really messes up stupid things like counting line numbers, um, especially in super, super large file, um. And so what we've done to alleviate this is we let the model kind of sketch out this rough code block that indicates what the change will be and we train a model to then apply that change to the file and we should say that apply is the model looks at your code. It gives you a really damn good suggestion of what new things to do and the seemingly for humans trivial step of combining the two you're saying is not so trivial. Contrary to popular perception, it is not a deterministic algorithm. Yeah, i, i, i think, like you see shallow copies of apply um elsewhere and it just breaks, like most of the time, because you think you can kind of try to do some deterministic matching and then it fails, you know, at least 40% of the time, and that just results in a terrible product experience.

Um, i think in general, this, this regime of you, are going to get smarter models and like. So one other thing that apply lets you do is it lets you use fewer tokens with the most intelligent models. Uh, this is both expensive in terms of latency for generating all these tokens um and cost, so you can give this very, very rough sketch and then have your smaller models go and implement it, because it's a much easier task to implement this very, very sketched out code. And i think that this, this regime will continue, where you can use smarter and sm models to do the planning and then maybe the implementation details uh can be handled by the less intelligent ones. Perhaps you'll have you know, maybe 01, maybe it'll be even more cap capable models given an even higher level plan that is kind of recursively uh applied by sonet and then the apply model. Maybe we should. We should talk about how to how to make it fast. Yeah, i feel like fast is always an interesting detail. Fast, good, yeah. How do you make it fast? Yeah, so one big component of making it it fast is speculative edits. So speculative edits are a variant of speculative decoding and maybe be helpful to briefly describe speculative decoding, um. With speculative decoding, what you do is you, you can kind of take advantage of the fact that you know most of the time, and i i'll add the caveat that it would be when you're memory bound in in language model generation um. If you process multiple tokens at once, um, it is faster than generating one tok at a time. So this is like the same reason why, if you look at tokens per second, uh with prompt tokens versus generated tokens, it's much, much faster for prompt tokens, um.

So what we do is, instead of using what specul decoding normally does, which is using a really small model to predict these draft tokens, that your larger model would then go in and and verify um with code edits we have a very strong prior of what the existing code will look like and that prior is literally the same exact code. So you can do is you can just feed chunks of the original code back into the, into the model, um, and then the model will just pretty much agree most of the time that, okay, i'm just going to spit this code back out, and so you can process all of those lines in parallel and you just do this with sufficiently many chunks and then eventually you'll reach a point of disagreement where the model will now predict text that is different from the ground truth original code. It'll generate those tokens and then we kind of will decide, after enough tokens match, uh, the original code, to re start speculating in chunks of code. What this actually ends up looking like is just a much faster version of normal editing code. So it's just like it looks like a much faster version of the model rewriting all the code. So just we, we can use the same exact interface that we use for for diffs, but it will just stream down a lot faster. And then- and then the advantage is that w wireless streaming- you can just also be reviewing, start reviewing the code exactly before before it's done. So there's no, no big loading screen, uh, so maybe that that is part of the part of the advantage, so the human can start reading before the thing is done. I think the interesting riff here is something like like speculation is a fairly common idea nowadays. It's like not only in language models, i mean, there's obviously speculation in cpus and there's there like speculation for databases and like speculation all over the place.

Let me ask the sort of the ridiculous question of: uh, which llm is better at coding? Gpt, claude, who wins in the context of programming? And i'm sure the answer is much more nuance, because it sounds like every single part of this involves a different model. Yeah, i think they. There's no model that poo dominates uh others, meaning it is better in all categories that we think matter, the categories being speed, um, ability to edit code, ability to process lots of code, long context- you know a couple of other things- and kind of coding capabilities. The one that i'd say right now is just kind of net best is sonet. I think this is a consensus opinion. Our one's really interesting and it's really good at reasoning. So if you give it really hard uh programming, interview style problems or lead code problems, it can do quite quite well on them, um, but it doesn't feel like it kind of understands your rough intent as well as son, it does like if you look at a lot of the other frontier models, um, one qual i have is it feels like they're not necessarily over. I'm not saying they they train in benchmarks, um, but they perform really well in benchmarks relative to kind of everything that's kind of in the middle. So if you tried on all these benchmarks and things that are in the distribution of the benchmarks they're valuated on, you know they'll do really well. But when you push them a little bit outside of that son's i think the one that that kind of does best at at kind of maintaining that same capability like you kind of have the same capability in the benchmark as when you try to instruct it to do anything with coding. What another ridiculous question is the difference between the normal programming experience versus what benchmarks represent? Like where do benchmarks fall short? Do you think when we're evaluating these models, by the way, that's like a really, really hard.

It's like like critically important detail, like how how different like benchmarks are versus where is like real coding? Where real coding it's not interview style coding, it's you're, you're doing these, you know humans are saying like half broken english sometimes, and sometimes you're saying like, oh, do what i did before. Sometimes you're saying, uh, you know, go add this thing and then do this other thing for me and then make this ui element, and then you know it's. It's just like a lot of things are sort of context dependent. You really want to like understand the human and then do do what the human wants, as opposed to sort of this. Maybe the- the way to put it is sort of abstractly- is, uh, the interview problems are very wellp specified. They lean a lot on specification, while the human stuff is less specified. Yeah, i think that this, this sp for question, is both complicated by what um sol just mentioned and then also to what aman was getting into. Is that, even if you like, you know there's this problem of like the skew between what can you actually model in a benchmark versus, uh, real programming, and that can be sometimes hard to encapsulate because it's like real programming is like very messy and sometimes things aren't super well specified- what's correct or what isn't. But then, uh, it's also doubly hard because of this public benchmark problem, and that's both because public benchmarks are sometimes kind of hill climbed on, then it's like really really hard to also get the data from the public benchmarks out of the models. And so, for instance, like one of the most popular like agent benchmarks, sweet bench um is really really contaminated in the training data of uh these foundation models. And so if you ask these foundation models to do a sweet bench problem, you actually don't give them the context of a codebase.

They can like hallucinate the right file pass, they can hallucinate the right function names, um, and so the the it's, it's also just the public aspect of these things is tricky. Yeah, like in that case it could be trained on the literal issues or pool request themselves and and maybe the lives will start to do a better job um, or they've already done a good job at decontaminating those things, but they're not going to emit the actual training data of the repository itself. Like these are all like some of the most popular python repositories, like simpai is one example. I don't think they're going to handicap their models on senpai and all these popular p python repositories in order to get uh true evaluation scores in these benchmarks. Yeah, i think that, given the dirs and benchmarks, um, there have been like a few interesting crutches that uh, places that build systems with these models or build these models actually use to get a sense of are they going in the right direction or not, and, uh, in a lot of places, uh, people will actually just have humans play with the things and give qualitative feedback on these. Um, like one or two of the foundation model companies. They, they have people who that's that's a big part of their role and, you know, internally, we also, uh, you know, qualitatively assess these models and actually lean on that a lot, in addition to, like, private evals that we have. It's like the live the vibe, yeah, the vi the vibe benchmark, human benchmark, the hum, you pull in the humans to do a vibe check. Yeah, okay, i mean, that's that's kind of what i do like, just like reading online forums and reddit and x, just like. Well, i don't know how to properly load in people's opinions because they'll say things like i feel like claude or gpt's gotten dumber or something they'll say i feel like, and then i sometimes feel like that too, but i wonder if it's the model's problem or mine. Yeah, with claude, there's an interesting take.

I heard where i think aws has different chips, um, and i i suspect they've slightly different numerics than uh nvidia gpus and someone speculated that claud's deg degraded performance had to do with maybe using the quantise version that existed on aws bedrock versus uh whatever was running on on anthropics gpus. I interview a bunch of people that have conspiracy theories so i'm glad spoke spoke to this conspiracy. Well, it's, it's not not like conspiracy theory as much as they're, just they're like they're. You know humans, humans are humans and there's, there's these details and you know you're doing like these quzy amount of flops and you know chips are messy and man, you can just have bugs like bugs are. It's. It's hard to overstate how, how hard bugs are to avoid. What's, uh, the role of a good prompt in all this? See, you mention that benchmarks have really, uh, structured, well formulated prompts. What, what should a human be doing to maximize success and what's the importance of what the humans? You wrote a blog post on. You called it prompt design. Yeah, uh, i think it depends on which model you're using and all of them are likly different and they respond differently to different prompts. But, um, i think the original gp4 uh and the original sort of bre of models last, last year, they were quite sensitive to the prompts and they also had a very small context window. And so we have all of these pieces of information around the codebase that would maybe be relevant in the prompt, like you have the docs, you have the files that you add, you have the conversation history, and then there's a problem like how do you decide what you actually put in the prompt? And when you have a, a limited space, and even for today's models, even when you have long context, filling out the entire context window means that it's slower. It means that sometimes a model actually gets confused and some models get more confused than others.

And we have this one system internally that we call preum, which helps us with that a little bit. Um, and i think it was built for the era before where we had 8,000 uh token context windows uh, and it's a little bit similar to when you're making a website- you, you sort of you- you want it to work on mobile, you want it to work on a desktop screen and you have this uh dynamic information, which you don't have. For example, if you're making, like, designing a print magazine, you have, like you know exactly where you can put stuff, but when you have a website or when you have a prompt, you have these inputs and then you need to format them, will always work, even if the input is really big, then you might have to cut something down. Uh, and and, and. So the idea was okay, like, let's take some inspiration. What's the best way to design websites? Well, um, the thing that we really like is is react and the declarative approach where you- um, you use jsx, in, in, in javascript, uh, and then you declare: this is what i want, and i think this has higher priority, or, like, this has higher z index than something else. Um, and then you have this rendering engine in web design. It's it's like chrome and uh. In our case it's a pre renderer, uh, which then fits everything onto the page, and, and so you declaratively decide what you want, and then it figures out what you want, um, and and.

So we have found that to be, uh, quite helpful, and i think the role of it has has sort of shifted over time: um, where initially was to fit to these small context windows, now it's really useful because you know it helps us with splitting up the data that goes into the prompt and the actual rendering of it, and so, um, it's easier to debug because you can change the rendering of the prompt and then try it on old prompts, because you have the raw data that went into the prompt and then you can see: did my change actually improve it? For for like this entire evil set? So do you literally prompt with jsx? Yes, yes, so it kind of looks like react. There are components, like we have one component that's a file component and it takes in like the cursor, like usually there's like one line where the cursor is in your file and that's like probably the most important line because that's the one you're looking at, and so then you can give priorities, so like that line has the highest priority and then you subtract one for every line that uh is farther away and then eventually, when it's render it, to figure out how many lines can i actually fit, and it centers around that thing. That's amazing, yeah, and you can do like other fancy things where if you have lots of code blocks from the entire code base, you could use uh, retrieval, um and things like embedding and reranking scores to add priorities for each of these components. So should humans, when they ask questions, also use, try to use something like that, like would it be beneficial to write jsx in the in the problem where the whole idea is should be loose and messy. I, i think our goal is kind of that you should just uh do whatever is the most natural thing for you, and then we are. Job is to figure out how do we actually like retrieve the relative ev things so that your thing actually makes sense.

Well, this is sort of the discussion i had with uh arvin, of perplexity is like his whole idea is like you should let the person be as lazy as he want, but like yeah, that's a beautiful thing, but i feel like you're allowed to ask more of programmers, right. So like if you say, just do what you want, i mean humans are lazy. There's a kind of tension between just being lazy versus like provide more. Is uh be prompted almost like the system pressuring you or inspiring you to be articulate, not in terms of the grammar of the sentences but in terms of the depth of thoughts that you convey inside the uh the problems, i think, even as a system gets closer to some level of perfection, often when you ask the model for something, you just are not, not enough intent is conveyed to know what to do and there are like a few ways to resolve that intent? One is the simple thing of having model. Just ask you- i'm not sure how to do these parts based in your query- could you clarify that, um, i think the other could be: maybe, if you there are five or six possible generations, given the uncertainty present in your query so far, why don't we just actually show you all of those and let you pick them? How hard is it to for the model to choose to speak, talk back sort of, versus gener? That's a that's hard, sort of like how to deal with the uncertainty, do i do i choose to ask for more information to reduce the ambiguity? So i mean, one of the things we we do is, um, it's like a recent addition is, try to suggest files that you can add. So, and while you're typing, uh, one can guess what the uncertainty is and maybe suggest that, like you know, maybe, maybe you're writing your api and, uh, we can guess, using the commits, uh, that you've made previously in the same file, that the client and the server is super useful.

And, uh, there's like a hard technical problem of how do you resolve it across all commits, which files are the most important given your current prompt, and we still sort of uh initial version is ruled out and i'm sure we can make it much more accurate. Uh, it's, it's, it's very experimental, but then the ideaas we show you like, do you just want to add this file, this file, this file? Also to tell you know the model to edit those files for you? Uh, because if, if you're, maybe you're making the api like, you should also edit the client and the server that is using the api and the other one resolving the api, and so that would be kind of cool, as both there's the phase where you're writing the prompt and there's before you even click enter. Maybe we can help resolve some of the uncertainty. To what degree do you use, uh, agentic approaches? How useful are agents? We think agents are really really cool, like i, i. i think agents is like, uh, it's like resembles, sort of like a human, it's sort of like the like. You can kind of feel that it like you're getting closer to agi because you see a demo where um, it acts as as a human would, and, and it's really really cool. I think um agents are not yet super useful for many things. They. I think we're we're getting close to where they will actually be useful, and so i think, uh, there are certain types of tasks where having an agent would be really nice. Like, i would love to have an agent, for example, if, like, we have a bug where you sometimes can't command c and command v, uh, inside our chat input box, and that's a task that's super well specified, i just want to say, like in two sentences, this does not work, please fix it. And then i would love to have an agent that just goes off, does it? And then, uh, a day later, i, i come back and i review the, the thing you mean. It goes, finds the right file- yeah, it finds the right files.

It like tries to reproduce the bug, it like fixes the bug and then it verifies that it's correct. And this is could be a process that takes a long time, um, and so i think i would love to have that, uh. And then i think, a lot of programming, like, there is often this belief that agents will take over all of programming. Um, i don't think we think that that's the case, because a lot of programming, a lot of the value is in iterating, or you don't actually want to specify something upfront, because you don't really know what you want until youve seen an initial version and then you want to iterate on that and then you provide more information, and so for a lot of programming, i think you actually want a system that's instant, that gives you an initial version instantly back and then you can iterate super, super quickly. Uh, what about something like that recently came out: rep agent that does also like setting up the development environment, installing software packages, configuring everything, configuring the databases and actually deploying the app. Yeah, is that also in the set of things you dream about? I think so. I think that would be really cool for for certain types of programming. Uh, it, it would be really cool. Is that within scope of cursor? Yeah, we're aren't actively working on it right now, um, but it's definitely like we want to make the programmer's life easier and more fun and some things are just really tedious and you need to go through a bunch of steps and you want to delegate that to an agent. Um, and then some things you can actually have an agent in the background while you're working.

Like, let's say, you have a pr that's both backend and front end and you're working in the front end and then you can have a background agent that doesn't work and figure out kind of what you're doing and then when you get to the backend part of your pr, then you have some like initial piece of code that you can iterate on, um and and so that that would also be really cool. One of the things we already talked about is speed, but i wonder if we can just uh linger on that some more in the, the various places that, uh, the technical details involved in making this thing really fast. So every single aspect of cursor, most aspects of cursor, feel really fast. Like i mentioned, the apply is probably the slowest thing and for me- from sorry, the pain, i know it's- it's a pain, it's a pain that we're feeling and we're working on fixing it. Uh, yeah, i mean, it says something that, something that feels- i don't know what it is like- 1 second or two seconds that feels slow, that means that's actually shows that everything else is just really really fast, um. So is there some technical details about how to make some of these models? So, how to make the chat fast, how to make the diffs fast? Is there something that just jumps to mind? Yeah, i mean, so we can go over a lot of the strategies that we use. One interesting thing is cash waring, um, and so what you can is if, as the user is typing, you can have- yeah, you're, you're probably going to use uh, some piece of context and you can know that before the user's done typing. So you know, as we discussed before, reusing the kv cache results and lower latency, lower cost, uh cross requests. So as a user starts type in, you can immediately warm the cache with, like, let's say, the current file contents and then, when theyve pressed enter, uh, there's very few tokens it actually has to to prefill and compute before starting the generation. This will significantly lower ttf.

Can you explain how kv cach works? Yeah, so the way transformers work, um, i like it. I mean like one one of the mechanisms that allow transformers to not just independently like. The mechanism that allows transformers to not just independently look at each token but see previous tokens are the keys and values to tension. And generally the way tension works is you have at your current token, some query and then you've all the keys and values of all your previous tokens, which are some kind of representation that the model stores internally of all the previous tokens in the prompt and like by default when you're doing a chat, the model has to, for every single token, do this forward pass through the entire uh model. That's a lot of matrix multiplies that happen and that is really really slow. Instead, if you have already done that and you stored the keys and values and you keep that in the gpu, then when i'm, let's say, i have stored it for the last end tokens. If i now want to compute the, the output token for the n plus one token, i don't need to pass those first end tokens through the entire model because i already have all those keys and values and so you just need to do the forward pass through that last token and then when you're doing attention, uh, you're reusing those keys and values that have been computed, which is the only kind of sequential part, um, or sequentially dependent part of the transformer. Is there like higher level caching of, like caching of the prompts or that kind of stuff could help? Yeah, that that there's other types of caching you can kind of do um. One interesting thing that you can do for cursor tab is you can basically predict ahead, as if the user would have accepted the suggestion and then trigger another uh request and so then you've cashed, you've done the speculative it's. It's a mix of speculation and caching.

Right, because you're speculating what would happen if they accepted it, and then you have this value, that is, cach this, this, uh suggestion, and then when they press tab, the next one would be waiting for them immediately. It's a, it's a kind of clever, heuristic slash trick, uh, that uses a higher level caching and and can give uh the it feels fast, despite there not actually being any changes in the in the model. And if you can make the kv cach smaller, one of the advantages you get is like, maybe, maybe you can speculate even more, maybe you can get seriously 10 things that you know could be useful. I like, uh, like predict the next 10 and and then, like it's possible, the user hits the the one of the 10. it's like much higher chance than the user hits like the exact one that you show them. Uh, maybe they typeing another character and and he sort of hits, hits something else in the cache, yeah, so there's, there's all these tricks where um, the, the general phenomena here is, uh, i think it's. It's also super useful for rl, is, you know, may maybe a single sample from the model isn't very good, but if you predict like 10 different things, uh, turns out that one of the 10- uh, that's right is the probability is much higher. There's these passid key curves and you know part of rl, like what what rl does is. You know, you can, you can exploit this passid k phenomena to to make many different predictions and and uh, one, one way to think about this- the model sort of knows internally, has, like, has some uncertainty over, like, which of the key things is correct, or like which of the key things does the human want. When we arl our, uh, you know, cursor tab model, one of the things we're doing is we're predicting which, like which of the hundred different suggestions the model produces is more amendable for humans.

Like which of them do humans more like than other things? Uh, maybe, maybe, like there's something with the model can predict very far ahead versus, like a little bit and maybe somewhere in the middle. And and you just, and then you can give a reward to the things that humans would like more and and sort of punish the things that it would like and sort of then train the model to output the suggestions that humans would like more. You, you have these like rl loops that are very useful that exploit these passive k curves. Um, oman maybe can can go into even more detail. Yeah, it's a little. It is a little different than speed um, but i mean, like technically you tie it back in because you can get away with the smaller model if you are all your smaller model and it gets the same performance as the bigger one. Um, that's like and sw. I was mentioning stuff about kv, about reducing the size of your kv cach there. There are other techniques there as well that are really helpful for speed um. So kind of back in the day, like all the way two years ago, uh, people mainly use multi-ad attention um and i think there's been a migration towards more uh efficient attention schemes like group query um or multiquery attention, and this is really helpful for then uh with larger batch sizes being able to generate the tokens much faster. The interesting thing here is, um, this now has no effect on that uh time to first token, pre-fill speed uh. The thing this matters for is uh now generating tokens. And and why is that? Because when you're generating tokens, instead of uh being bottlenecked by doing the super realizable matrix multiplies across all your tokens, you're bottleneck by how quickly it's for long context um with large batch sizes, by how quickly you can read those cache keys and values, um. And so then, how that- that's memory bandwidth- and how can we make this faster? We can try to compress the size of these keys and values.

So multiquery attention is the most aggressive of these, um, where normally with multi-head attention you have some number of- quote- unquote attention heads, um, and some number of kind of query query heads, u. multiquery just preserves the query heads, gets rid of all the key value heads, um, so there's only one kind of key value head and there's all the remaining uh query heads with group query um. You instead, you know, preserve all the query heads and then your keys and values are kind of in. There are fewer heads for the keys and values, but you're not reducing it to just one um. But anyways, like the whole point here is, you're just reducing the size of your kv cache. And then there is mla, yeah, multi- latent um. That's a little more complicated and the way that this works is it kind of turns the entirety of your keys and values across all your heads into this kind of one latent vector that is then kind of expanded in frence time. But mla is from this company uh called deep seek um, it's. It's quite an interesting algorithm. Uh, maybe the key idea is sort of, uh, in both mqa, uh and in other places, what you're doing is sort of reducing the uh num, like the number of kv heads. The advantage you get from that is is, you know there's less of them. But, uh, maybe the theory is that you actually want a lot of different uh, like you want each of the, the keys and values to actually be different. So one way to reduce the size is you keep, uh, one big shared vector for all the keys and values and then you have smaller vectors for every single token so that when you m you can, you can store the only the smaller thing as some sort of like low rank reduction and the low rank reduction with that and at the end of the time, when you, when you eventually want to compute the final thing, uh, remember that like your memory bound, which means that, like you still have some, some compute left that you can use for these things.

And so, if you can expand the um, the latent vector back out and and somehow, like this is far more efficient because, just like you're reducing like, for example, maybe like you're reducing like 32 or something like the size of the vector that you're keeping. Yeah, there's perhaps some richness in having a separate uh set of keys and values and query, that kind of pawise match up versus compressing that all into one and that interaction at least. Okay, and all of that is dealing with um being memory bound, yeah, and what i mean ultimately, how does that map to the user experience trying to get the yeah, the. The two things that it maps to is: you can now make your cash a lot larger because you've less space allocated for the kb cash. You can maybe cash a lot more aggressively and a lot more things do you get more cash hits, which are helpful for reducing the time to first token, for the reasons that were kind of described earlier, and then the second being when you start doing inference, with more and more requests and larger and larger batch sizes, you don't see much of a slowdown in as it's generating the tokens, the speed of that, what it also allows you to make your prompt bigger for certain, yeah, yeah. So, like the basic, the size of your kv cache is, uh, both the size of all your prompts multiply by the number of prompts being processed in parallel. So you could increase either those dimensions, right, the batch size or the size of your prompts, without degrading the latency of generating tokens. Arvid, you wrote a blog post: shadow workspace- iterating on code in the background. Yeah, so what's going on? Uh, so, to be clear, we want there to be a lot of stuff, stuff happening in the background, and we're experimenting with a lot of things. Uh, right now, uh, we don't have much of that happening other than, like the, the cash warming or, like you know, figuring out the right context to that goes into your command, prs, for example.

Uh, but the idea is, if you can actually spend computation in the background, then you can help, um, help the user, maybe, like at a slightly longer time, horizon, than just predicting the next few lines that you're going to make, but actually, like, in the next 10 minutes, what are you're going to make, and by doing it in background, you can spend more comp computation doing that. And so the idea of the shadow workspace- that that we implemented and we use it internally for, like experiments, um, is that to actually get advantage of doing stuff in the background, you want some kind of feedback signal to give, give back to the model, because otherwise, like, you can get higher performance by just letting the model think for longer, um and and so like. O1 is a good example of that. But another way you can improve performance is by letting the model iterate and get feedback, and and so one very important piece of feedback when you're a programmer is, um, the language server, which is uh, this thing. It exists, uh for most different languages and there's like a separate language ser per language and it can tell you- you know you're using the wrong type appear and then gives you an error or it can allow you to go to definition and sort of understands the structure of your code. So language servers are extensions developed by like. There's a typescript language ser developed by the typescript people, a rust language ser developed by the rust people, and then they all inter interface over the language server protocol to vs code, so that vs code doesn't need to have all of the different languages built into vs code, but rather, uh, you can use the existing compiler infrastructure for linting purposes.

What it's for? It's for linting, it's for going to definition, uh, and for like, seeing the, the right types that you're using, uh, so it's doing like type checking also- yes, type checking- and and going to references, um, and that's like when you're working in a big project. You you kind of need that if you. If you don't have that, it's like really hard to to code in a big project. Can you say again how that's being used inside cursor, the, the language server protocol, communication thing. So it's being used in cursor to show to the programmer, just like nvs could. But then the idea is you want to show that same information to the models, the i models, um- and you want to do that in a way that doesn't affect the user, because you wanted to do it in background, and so the idea behind the chadow workspace was okay, like one way we can do this is um, we spawn a separate window of cursor that's hidden and so you can set this flag and electron is hidden. There is a window, but you don't actually see it, and inside of this window, uh, the ai agents can modify code however they want um- as long as they don't save it, because it's still the same folder um- and then can get feedback from from the lters and go to definition and and iterate on their code. So like literally run everything in the background, like as if right, yeah, maybe even run the code. So that's the eventual version. Okay, that's what you want, and a lot of the blog post is actually about how do you make that happen, because it's a little bit tricky.

You want it to be on the user's machine so that it exactly mirrors the user's environment, and then on linux you can do this cool thing where you can actually mirror the file system and have the ai make changes to the files and and it thinks that it's operating on the file level but actually that's stored in in memory and you, you can uh create this kernel extension to to make it work, um, whereas on mac and windows it's a little bit more difficult, uh and and uh, but it's. It's a fun technical problems. That's way one. One maybe hacky but interesting idea that i like is holding a lock on saving, and so basically you can then have the language model kind of hold the lock on on saving to disk and then, instead of you operating in the ground truth version of the files, uh, that are save to dis, you you actually are operating. What was the shadow workspace before? And these unsaved things that only exist in memory that you still get lind erors for and you can code in, and then when you try to maybe run code. It's just like there's a small warning that there's a lock and then you kind of will take back the lock from the language server if you're trying to do things concurrently, or from the, the shadow workspace if you're trying to do things concurrently. That's such an exciting feuture- by the way, it's a bit of a tangent, but like to allow a model to change files. It's scary for people, but like it's really cool to be able to just like let the agent do a set of tasks and you come back the next day and kind of observe like it's a colleague or something like that. Yeah, yeah, and i think there may be different versions of like runability where for the simple things, where you're doing things in the span of a few minutes on behalf of the user as they're programming, it makes sense to make something work locally in their machine.

I think for the more aggressive things, where you're making larger changes that take longer periods of time, you'll probably want to do this in some sandbox, remote environment. And that's another incredibly tricky problem of how do you exactly reproduce- or mostly reproduce to the point of it being effectively equivalent for running code- the user's environment, which is remote, remote, sandbox? I'm curious what kind of agents you want for for coding? Oh, do you want them to find bugs? Do you want them to, like, implement new features, like? What agents do you want? So, by the way, when i think about agents, i don't think just about coding. Uh, i think so for the practic, this particular podcast. There's video editing and a lot of- if you look in adobe, a lot there's code behind. Uh, it's very poorly documented code, but you can interact with premiere, for example, using code and basically all the uploading, everything i do on youtube, everything, as you could probably imagine, i do all of that through code and so, and including translation and overdubbing all this. So i envision all those kinds of tasks, so automating many of the tasks that don't have to do directly with the editing. So that, okay, that's what i was thinking about. But in terms of coding, i would be fundamentally thinking about bug finding, like many levels of kind of bug finding, and also bug finding like logical bugs, not logical, like spiritual bugs or something. One's like sort of big directions of implementation, that kind of stuff. That's bine on buck finding. Yeah, i mean, it's really interesting that these models are so bad at bug finding. Uh, when just naively prompted to find a bug. They're incredibly poorly calibrated, even the, the smartest models, exactly even o, even 01.

how do you explain that? Is there a good intuition? I think these models are a really strong reflection of the pre-training distribution and, you know, i do think they- they generalize as the loss gets lower and lower, but i don't think the, the loss and the scale is quite or the loss is low enough such that they're like really fully generalizing in code, like the things that we use these things for, uh, the frontier models, that that they're quite good at, are really code generation and question answering. These things exist in massive quantities and pre-training with all of the code on github on the scale of many, many trillions of tokens and questions and answers on things like stack overflow and maybe github issues. And so when you try to push some of these things that really don't exist, uh very much online, like, for example, the cursor tap objective of predicting the next edit, given the edit's done so far, uh the brittleness kind of shows. And then bug detection is another great example where there aren't really that many examples of like actually detecting real bugs and then proposing fixes, um, and the models just kind of like really struggle at it, but i think it's a question of transferring the model, like in the same way that you get this fantastic transfer um from pre-trained models, uh, just on code in general, to the cursor tab objective, uh, you'll see a very, very similar thing with generalized models that are really good to code, to bug detection. It just takes like a little bit of kind of nudging in that direction. Like to be clear, i think they sort of understand code really well, like while they're being pre-trained, like the representation that's being built up, like almost certainly, like you know, somewhere in the stream there's the model knows that maybe there's there's some sk, something sketchy going on. Right, it sort of has some sketchiness.

But actually eliciting this, the sketchiness to uh like actually like part part of it is that humans are really calibrated on which bugs are really important. It's not just actually, it's not just actually saying like there's something sketchy, it's like it's just sketchy trivial. It's the sketchy like you're going to take the server down. It's like like part of it is maybe the cultural knowledge of uh like, why is a staff engineer a staff engineer? A staff engineer is is good, because they know that three years ago, like someone wrote a really you know sketchy piece of code that took, took the server down and, as opposed to like as supposed to, maybe it's like you know you, just this thing is like an experiment, so like a few bugs are fine, like you're just trying to experiment and get the feel of the thing, and so if the model gets really annoying when you're writing an experiment, that's really bad. But if you're writing something for super production, you're like writing a database, right, you're. You're writing code in post scripts or linux or whatever, like your lineus tals, you're. You're. It's sort of unacceptable to have even a edge case and just having the calibration of like how paranoid is the user? Like, but even then, like if you're putting in a maximum paranoia, it still just like doesn't quite get it. Yeah, yeah, yeah i mean, but this is hard for humans too to understand what. Which line of code is important, which is not. It's like you, i think one of your principles on a website says: if, if, if a code can do a lot of damage, one should add a comment that say this: this, this line of code is, is dangerous, and all caps 10 times. No, you say like, for every single line of code inside the function you have to, and that's quite profound. That says something about human beings, because the, the engineers, move on. Even the same person might just forget how it can sync the titanic, a single function like you don't.

You might not in it that quite clearly by looking at the single piece of code. Yeah, and i think that that one is also, uh, partially also for today's ai models where, uh, if you actually write dangerous, dangerous, dangerous, in every single line, like uh, the models will pay more attention to that and will be more likely to find bucks in that region. That's actually just straight up, a really good practice of a labeling code of how much damage this can do. Yeah, i mean, it's controversial, like some people think it's ugly, uh, swall. Well, i actually think it's. It's like, in fact, i actually think this one of the things i learned from ar is, you know, like i sort of aesthetically i don't like it, but i think there's certainly something where, like it's, it's useful for the models and and humans just forget a lot and it's really easy to make a small mistake and cause like, bring down, you know, like just bring down the server, and like you like, of course, we, we like test a lot and whatever. But there, there's always these things that you have to be very careful. Yeah, like with just normal dock strings, i think people will often just skim it when making a change and think, oh, this, i, i know how to do this, um, and you kind of really need to point it out to them so that that doesn't slip through. Yeah, you have to be reminded that you could do a lot of damage. That's like we don't really think about that, like, yeah, you think about, okay, how do i figure out how this work so i can improve it. You don't think about the other direction that could until until we have formal verification for everything. Then you can do whatever you want and you, you know for certain that you have not introduced a bug if the proof passes.

But concretely, what do you think that future would look like? I think, um, people will just write tests anymore and, um, the model will suggest: like you write a function, the model will suggest a spec and you review the spec and, uh, in the meantime, a smart reasoning model computes appr proof that the implementation follows the spec. Um, and i think that happens for for most functions. Don't you think this gets at a little bit some of the stuff you were talking about earlier with the difficulty of specifying intent for what you want with software, um, where sometimes it might be, because the intent is really hard to specify, it's also then going to be really hard to prove that it's actually matching whatever your intent is. Like. You think that spec is hard to generate? Yeah, or just like for a given spec, maybe you can. I think there is a question of like. Can you actually do the formal verification, like that's like, is that possible? I think that there's like more to dig into there. But then also, even if you have this spe, if you have this spe, how do you you have the spec? Is the spec written in natural language? The spec spec would be formal, but how easy would that be? So then i think that you care about things that are not going to be easily well specified in the spec language. I see, i see would be. Um, yeah, maybe an argument against formal verification is all you need. Yeah, the worry is there's this massive document replacing, replacing something like unitest. Sure, yeah, yeah, um, i think you can probably also evolve the, the spec languages to capture some of the things that they don't really capture right now. Um, but yeah, i don't know. I think it's very exciting and you're speaking not just about, like, single functions, you're speaking about entire code bases. I think entire code bases is harder, but that that is what i would love to have and i think it should be possible.

And because you can, even there there's like a lot of work recently where, uh, you can prove, formally verify down to the hardware. So, like through the, you formally verify the c code and then you formally verify through the gcc compiler and then, through the var, log down to the hardware, um, and that's like incredibly big system but it actually works. And i think big code bases are are sort of similar in that they're like multi-layered system and um, if you can decompose it and formally verify each part, then i think it should be possible. I think the specification problem is a real problem. But how do you handle side effects? Or how do you handle, i guess, external dependencies, like calling the stripe api? Maybe stripe would write a spec for their. You can't do this for everything, like, can you do this for everything you use, like how do you? How do you do it? For if there's language mod, like maybe, maybe, like people use language models as primitives in the programs they write and there's like a dependence on it and like how, how do you now include that? I think you might be able to prove. Prove that, still prove. What about language models? I think it, it feels possible that you could actually prove that a language model is aligned, for example, or like you can prove that it actually gives the the right answer. Um, that's the dream, yeah, that is. I mean that's, if it's possible, your, i have a dream speech. If it's possible, that that will certainly help with, you know, uh, making sure your code doesn't have bugs and making sure ai doesn't destroy all of human civilization. So the the full spectrum of ai safety to just bug finding. Uh, so you said the models struggle with bug finding. What's the hope? You know, my hope initially is and- and i can let michael michael chime into to it- but was like this: um, it should, you know, first help with the stupid bugs.

Like it should very quickly catch the stupid bugs like off by one erors, like sometimes you write something in a comment and do the other way. It's like very common, like i do this, i write like less than in a comment and like i maybe write it greater than, or something like that, and the model is like: yeah, it looks sketchy, like you, sure you want to do that, uh, but eventually it should be able to catch 100 bucks too. Yeah, and i think that it's also important to note that this is having good bug finding models feels necessary to get to the highest reaches of having ai do more and more programming for you. Where you're going to, you know, if the ai is building more and more of the system for you, you need to not just generate but also verify, and without that, some of the problems that we've talked about before with programming with these models, um, will just become untenable. Um, so it's not just for humans- like you write a bug, i write a bug, find the bug for me, but it's also being able to to verify the ai code and check it. Um is really important, yeah. And then, how do you actually do this? Like, we have had a lot of contentious dinner discussions of how do you actually train a bug model, but one very popular idea is: you know it's kind of potentially easy to introduce a bug than actually finding the bug, and so you can train a model to introduce bugs in existing code, um, and then you can train a reverse bug model. Then that uh can find, find bugs using this synthetic data. So that's like one example, um, but yeah, there are lots of ideas for how to also, um, you can also do a bunch of work, not even at the model level, of taking the biggest models and then maybe giving them access to a lot of information. That's not just the code.

Like it's kind of a hard problem to like stare at a file and be like where's the bug, and you know that's that's hard for humans, often right, and so often you have to to run the code and being able to see things like traces and step through a debugger. Um, there's another whole, another direction where it like kind of tends toward that and it could also be that there are kind of two different product form factors here. It could be that you have a really specialty model that's quite fast, that's kind of running in the background and trying to spot bugs. And it might be that sometimes, sort of to arvid's earlier example about you know some nefarious input box bug, might be that sometimes you want to like there's, you know there's a bug. You're not just like checking hypothesis free, you're like this is a problem. I really want to solve it. And you zap that with tons and tons and tons of compute and you're willing to put in like $50 to solve that bug or something even more, have you thought about integrating money into this whole thing, like i would pay probably a large amount of money for if you found a bug or even generated a code that i really appreciated, like i had a moment a few days ago when i started using c were generated, uh, perfect, uh like perfect. Three functions for interacting with the youtube api, to update captions and uh, for localization, like different in different languages. The api documentation is not very good and the code across like if i. i googled it for a while, i couldn't find exactly. There's a lot of confusing information and cursor generated perfectly, and i was like i just said back. I read the code. I was like this is correct. I tested it, it's correct. I was like i want a tip on a, on a button that goes: yeah, here's $5, one that's really good, just to support the company and support what the, the interface is, and the other is that probably sends a strong signal like good job, right.

So there, much stronger signal than just accepting the code, right you just actually send like a strong, good job that. And for bug finding, obviously, like there's a lot of people you know that would pay a huge amount of money for a bug, like a bug bug bounty thing, right, is that you guys think about that? Yeah, it's a controversial idea inside the, the company. I think it sort of depends on how much, uh, you believe in humanity, almost. You know, like uh, i think it would be really cool if, like uh, you spend nothing to try to find a bug and if it doesn't find a bug, you, you spend z, and then if it does find a bug, uh, and you click accept, then it also shows like in parenthesis, like $1, and so you spend $1 to accept a bug, uh. And then, of course, there's worry, like okay, we spent a lot of computation, like maybe people will just copy paste, um, i think that's a worry, um. And then there is also the worry that, like, introducing money into the product makes it like kind of, you know, like it doesn't feel as fun anymore, like you have to like think about money and and you all you want to think about is like the code, and so maybe it actually makes more sense to separate it out and like you pay some fee, like every month, and then you get all of these things for free. But there could be a tipping component which is not like it it it still has that like dollar symbol. I think it's fine, but i i also see the point where, like, maybe you don't want to introduce it. Yeah, i was going to say, the moment that feels like people do this is when they share it. When they have this fantastic example, they just kind of share it with their friends.

There is also a potential world where there's a technical solution to this like honor system problem too, where, if we can get to a place where we understand the output of the system more- i mean to the stuff we were talking about with, like you know, error checking with the lsp and then also running the code- but if you could get to a place where you could actually somehow verify- oh, i have fixed the bug- maybe then the, the bounty system, doesn't need to rely on the honor system too. How much interaction is there between the terminal and the code? Like, how much information is gained from if you, if you run the code in the terminal like, can you use, can you do like a, a loop where it runs, runs the code and suggests how to change the code if. If the code and runtime gives an error is right. Now there're separate worlds, completely, like i know you can like do control k inside the terminal to help you write the code. You, you can use terminal contacts as well, uh, inside of jack man, kind of everything. Um, we don't have the looping part yet, though we suspect something like this could make a lot of sense. There's a question of whether it happens in the foreground too, or if it happens in the background, like what we've been discussing. Sure, the background is pretty cool, like we do running the code in different ways. Plus, there's a database side to this, which how do you protect it from not modifying the database? But, okay, i mean, there's, there's certainly cool solutions there. Uh, there's this new api that is being developed for it's. It's not in aws, uh, but you know it's, it certainly it's. I think it's in planet scale. I don't know if planet scale was the first one you added.

It's the ability sort of add branches to a database, uh, which is, uh, like if you're working on a feature and you want to test against the prod database but you don't actually want to test against the pr database, you could sort of add a branch to the database in the way to do that is to add a branch to the wr ahead log, uh, and there's obviously a lot of technical complexity in doing it correctly. I, i guess database companies need need need new things to do, uh, because they have, they have, they have good databases now. Uh, and and i i think, like you know, turbo buffer, which is, which is one of the databases we use as is, is going to add hope maybe braning to the, to the rad log and and so so maybe maybe the, the ai agents will use we'll use branching, they'll like test against some branch and it's sort of going to be a requirement for the database to like support branching or something. It would be really interesting if you could branch a file system, right. Yeah, i feel like everything needs branching. It's like that, yeah, yeah, like that's the problem with the multiverse [music] right, like if you branch on everything, that's like a lot. I mean, there's there's obviously these like super clever algorithms to make sure that you don't actually sort of use a lot of space or cpu or whatever. Okay, this is a good place to ask about infrastructure. So you guys mostly use aws. What? What are some interesting details? What are some interesting challenges? Why' you choose aws? Why is? Why is aws still winning? Hashtag? Aws is just really really good. It's really good like um. Whenever you use an aws product, you just know that it's going to work like. It might be absolute hell to go through the steps to set it up, um, why is the interface so horrible? Because it's just so good. It doesn't need to. The nature of winning: i think it's exactly. It's just nature.

They winning: yeah, yeah, but aws you can always trust like, it will always work and if there is a problem, it's probably your problem. Yeah, okay, is there some interesting like challenges to? You? Guys have pretty new startup to get scaling to like to so many people and, yeah, i think that they're. Uh, it has been an interesting journey. Adding, you know, each extra zero to the request per second. You run into all of these with, like, you know, the general components you're using for for caching and databases. Run into issues as you make things bigger and bigger and now we're at the scale where we get, like you know, int overflows on our tables and things like that. Um, and then also there have been some custom systems that we've built, like, for instance, our ral system for um, computing a semantic index of your codebase and answering questions about a codebase. That have continually, i feel like, been one of the the trickier things to scale. I i have a few friends who are, who are super, super senior engineers, and one of their sort of lines is: like it's, it's very hard to predict where systems will break when, when you scale them, you, you, you can sort of try to predict in advance, but like there's, there's always something, something weird that's going to happen when, when you add this extra z and you, you thought you thought through everything, but you didn't actually think through everything, uh, but i think for that particular system we've. So what the the for concrete details, the thing we do is obviously we upload um when, like, we chunk up all of your code and then we send up sort of the code for, for embedding, and we embed the code and then we store the embeddings, uh, in a, in a database, but we don't actually store any of the code. And then there's reasons around making sure that we don't introduce client bugs, because we're very, very paranoid about client bugs. We store, uh, uh, much of the details on the server.

Uh, like everything is sort of encrypted. So one one of the technical challenges is is always making sure that the local index, the local codebase state, is the same as the state that is on the server. And and the way sort of technically we ended up doing that is so for every single file you can, you can sort of keep this hash and then for every folder you can sort of keep a hash which is the hash of all of its children, and you can sort of recursively do that until the top. And why? Why do something something complicated? Uh, one thing you could do is you could keep a hash for every file. Then every minute you could try to download the hashes that are on the server, figure out what are the files that don't exist on the server. Maybe just created a new file, maybe you just deleted a file, maybe you checked out a new branch and try to reconcile the state between the client and the server. But that introduces like absolutely ginormous network overhead both, uh, both on the client side. I mean, nobody really wants us to hammer their wi-fi all the time if you're using cursor, uh, but also, like i mean it would introduce like ginormous overhead in the database. It would sort of be reading this: uh, tens of terabyte database, sort of approaching like 20 terabyt or something, database like every second. That's just just kind of crazy. You definitely don't want to do that. So what you do? You sort of you just try to reconcile the single hash which is at the root of the project, and then if, if something mismatches, then you go you find where all the things disagree. Maybe you look at the children and see if the hashes match, and if the hashes don't match, go look at their children, and so on. But you only do that in the scenario where things don't match and for most people, most of the time the hashes match. So it's a kind of like hierarchical reconciliation. Yeah, something like that. Yeah, it's called the merkel tree, yeah, merkel, yeah, i mean.

So yeah, it's cool to see that you kind of have to think through all these problems and i mean the. The point of like the reason it's gotten hard is just because, like the number of people using it and you know if some of your customers have really really large code bases. Uh, to the point where we- you know we- we originally reordered our code base, which is, which is big, but i mean just just not the size of some company that's been there for 20 years and sort of has to train enormous number of files, and you sort of want to scale that across programmers, there's, there's all these details where, like, building the simple thing is easy, but scaling it to a lot of people, like a lot of companies is, is obviously a difficult problem, which is sort of, you know, independent of actually. So that's there's part of this scaling. Our current solution is also, you know, coming up with new ideas that obviously we're working on, uh, but then, but then scaling all of that in the last few weeks once, yeah, and there are a lot of clever things, like additional things that that go into this indexing system. Um, for example, the bottleneck in terms of costs is not storing things in the vector database or the database, it's actually embedding the code, and you don't want to reed the code base for every single person in a company that is using the same exact code, except for maybe they're in a different branch with a few different files or they've made a few local changes, and so, because, again, embeddings are the bottleneck, you can do this one clever trick and not have to worry about, like the complexity of like dealing with branches and and the other databases where you just have some cash on the actual vectors, uh, computed from the hash of a given chunk mh, and so this means that when the nth person at a company goes into their code base, it's, it's really really fast. And you do all this without actually storing any code on our servers at all.

No code data stored, we just store the vectors in the vector database and the vector cache. What's the biggest gains at this time you get from indexing the code base, like just out of curiosity, like what, what benefit users have? It seems like longer term there'll be more and more benefit, but in the short term, just asking questions of the code base, uh, what? What's the use, what's the usefulness of that? I think the most obvious one is: um, just, you want to find out where something is happening in your large code base and you sort of have a fuzzy memory of: okay, i want to find the place where we do x, um, but you don't exactly know what to search for in a normal text search and to ask a chat, uh, you hit command enter to ask with with the codebase chat and then, uh, very often it finds the, the right place that you were thinking of, i think, like you, like you mentioned, in the future, i think, this only going to get more and more powerful- where we're working a lot on improving the quality of our retrieval, um, and i think the cealing for that is really really much higher than people give a credit for. One question that's good to ask here: have you considered, and why haven't you much done, sort of local stuff to where you can do the? It seems like everything we just discussed is exceptionally difficult to do. To go, to go to the cloud, you have to think about all these things with the caching and the- uh, you know, large code bas with a large number of programmers are using the same code base. You have to figure out the puzzle of that. A lot of it, you know. Most software just does stuff, this heavy computational stuff, locally. So if you consider doing sort of embeddings locally- yeah, we thought about it and i think it would be cool to do it locally- i think it's just really hard.

And and one thing to keep in mind is that you know, uh, some of our users use the latest macbook pro, uh, and, but most of our users, like more than 80% of our users, are in windows machines which, uh, and- and many of them are- are not very powerful and and so local models really only works on the on the latest computers, and it's also a big overhead to to to build that in, and so even if we would like to do that, um, it's currently not something that we are able to focus on, and i think there there are some uh people that that that do that and i think that's great um, but especially as models get bigger and bigger and you want to do fancier things with like bigger models, it becomes even harder to do it locally. Yeah, and it's not a problem of like weaker computers. It's just that, for example, if you're some big company, you have big company code base. It's just really hard to process big company code based, even on the beefiest macbook pros. So even if it's not even a matter matter of like, if you're, if you're just like uh, a student or something, i think if you're like the best programmer at at a big company, you're still going to have a horrible experience if you do everything locally. When you could, you could do it and sort of scrape by, but like again, it wouldn't be fun anymore. Yeah, like at approximate nearest neighbors and this massive code base is going to just eat up your memory and your cpu and and and that's, and that's just that like. Let's talk about like also the modeling side, where, said, there are these massive headwinds against uh, local models, where one uh things seem to move towards moes, which, like one benefit is maybe they're more memory bandwidth bound, which plays in favor of local uh versus uh using gpus, um or using nvidia gpus. But the downside is these models are just bigger in total and you know they're going to need to fit, often not even on a single node, but multiple nodes.

Um, there's no way that's going to fit inside of even really good macbooks, um, and i think, especially for coding, it's not a question as much of like. Does it clear some bar of like, the model's good enough to do these things and then, like, we're satisfied, which may may be the case for other other problems and maybe where local models shine. But people are always going to want the best, the most intelligent, the most capable things and that's going to be really, really hard to run for almost all people locally. Don't you want the, the most capable model, like you want. You want sonet, you, and also with o. i like how you're pitching me1. Would you be satisfied with an inferior model? Listen, i, yeah, i'm, yes, i'm one of those, but there's some people that like to do stuff locally, especially like, yeah, really, there's a whole obviously open source movement, that kind of resists, and it's good that they exist, actually because you want to resist the power centers that are growing. Are there's actually an alternative to local models? Uh, that i particularly fond of? Uh, i think it's still very much in the research stage, but you could imagine, um, to do homomorphic encryption for language model inference, so you encrypt your input on your local machine, then you send that up and then, um the server, uh can use lots of computation, they can run models that you cannot run locally on this encrypted data, um, but they cannot see what the data is, and then they send back the answer and you decrypt the answer and only you can see the answer, uh. So i think, uh, that's still very much research and all of it is about trying to make the overhead lower, because right now the overhead is really big uh, but if you can make that happen, i think that would be really really cool and i think it would be really really impactful.

Um, because i think one thing that's actually kind of worrisome is that as these models get better and better, uh, they're going to become more and more economically useful and so more and more of the world's information and data uh will th flow through, you know, one or two centralized actors, um, and then there are worries about, you know there can be traditional hacker attempts, but it also creates this kind of scary part where, if all of the world's information is flowing through one node in pl text, um, you can have surveillance in very bad ways, and sometimes that will happen, for you know, in initially will be like good reasons, like people will want to try to prot, protect against, like bad act using ai models in bad ways, and then you will add in some surveillance code and then someone else will come in and you know you're in a slippery slope and then you start uh doing bad things with a lot of the world's data, and so i i'm very hopeful that uh, we can solve homomorphic encryption for doing privacy preserving machine learning. But i would say like that's the challenge we have with all software these days. It's like there's so many features that can be provided from the cloud and all of us increasingly rely on it and make our life awesome. But there's downsides and that's that's why you rely on really good security to protect from basic attacks. But there's also only a small set of companies that are controlling that data, you know, and they they obviously have leverage and they could be infiltrated in all kinds of ways. That's the world we live in.

Yeah, i mean, the thing i'm just actually quite worried about is sort of the world where mean entropic has this responsible scaling policy and so where we're on like the low, low asls, which is the entropic security level or whatever uh of like of the models, but as we get your like cod and code, asl, 3l, 4, whatever models uh, which are sort of very powerful but for, for mostly reasonable security reasons, you would want to monitor all the prompts, uh. But i think i think that's that's sort reasonable and understandable where, where everyone is coming from. But man, it'd be really horrible if, if sort of like all the world's information is sort of monitor that heavily. It's way too centralized. It's like it's like sort of this like really fine line you're walking where on the one side, like you don't want the models to go rogue on the other side like man, humans, like i- i don't know if i, if i trust- like all the world's information to pass through like three, three model providers. Yeah, why do you think it's different than cloud providers? Because i think the- this is a lot of this data- would never have gone to the cloud providers in the in the first place. Um, where this is often like: you want to give more data to the eio models, you want to give personal data that you would never have put online in the first place, uh, to these companies or or or to these models. Um, and it also centralizes control. Uh, where right now, um for for cloud, you can often use your own encryption keys and it, like it, can't really do much. Um, but here it's just centralized actors that see the exact plain text of everything. On the topic of context: that that's actually been a friction for me when i'm writing code. You know, in python there's a bunch of stuff imported. There's a. you could probably int it. The kind of stuff i would like to include in the context is there like: how, how hard is it to auto figure out the context? It's tricky.

Um, i think we can do a lot better um at uh computing the context automatically in the future. One thing that's important to not is there are trade-offs with including automatic context. So the more context you include for these models, um first of all, the slower they are, and um, the more expensive those requests are, which means you can then do less model calls and do less fancy stuff in the background. Also, for a lot of these models, they get confused if you have a lot of information in the prompt. So the bar for um accuracy and for relevance of the context you include should be quite high. Um, but this is already. We do some automatic context in some places within the product. It's definitely something we want to get a lot better at. And um, i think that there are a lot of cool ideas to try there. Um, both on the learning, better retrieval systems like better edding models, better rankers. I think that there are also cool academic ideas. You know stuff we've tried out internally. But also the field is grappling with rit large about. Can you get language models to a place where you can actually just have the model itself like understand a new corpus of information, and the most popular talked about version of this is: can you make the context windows infinite? Then, if you make the context windows infinite, can make the model actually pay attention to the infinite context and then after you can make it pay attention to the infinite context to make it somewhat feasible to actually do it, can you then do caching for that infinite context? You don't have to recompute that all the time. But there are other cool ideas that are being tried that are a little bit more analogous to fine-tuning of actually learning this information and the weights of the model, and it might be that you actually get sort of a qualitatively different type of understanding if you do it more at the weight level than if you do it at the inc context learning level.

I think the journey, the jury is still a little bit out on how this is all going to work in the end, uh, but in the interm us us as a company, we are really excited about better retrieval systems and, um, picking the parts of the code base that are most relevant to what you're doing. Uh, we could do that a lot better. Like one interesting proof of concept for the learning this knowledge directly in the weights is with vs code. So we're in a vs code fork and vs code. The code is all public. So these models in pre-training have seen all the code, um, they probably also seen questions and answers about it and then they've been fine tuned and rl chef to to be able to answer questions about code in general. So when you ask it a question about vs code, you know sometimes it'll hallucinate, but sometimes it actually does a pretty good job at answering the question and i think, like this is just by it happens to be okay at it. But what if you could actually like specifically train or post train a model such that it really was built to understand this code base? Um, it's an open research question, one that we're quite interested in. And then there's also uncertainty of like: do you want the model to be the thing that end to end is doing everything, ie, it's doing the retrieval in its internals and then kind of answering your question, creating the code? Or do you want to separate the retrieval from the frontier model where maybe you know you'll get some really capable models that are much better than, like, the best open source ones in a handful of months? Um, and then you'll want to separately train a really good open source model to be the retriever to be the thing that feeds in the context, um to these larger models. Can you speak a little more to the post trining a model to understand the code base like, what do you- what do you mean by that- with? Is this synthetic data direction? Is this? Yeah, i mean there are many possible ways you could try doing it.

There's certainly no shortage of ideas, um, it's just a question of going in and like trying all of them and being empirical about which one works best. Um, you know one, one very naive thing is to try to replicate what's done uh with vscode, uh and these frontier models. So let's like continue pre-training, some kind of continued pre-training that includes general code data but also throws in a lot of the data of some particular repository that you care about. And then in post trainining, um, meaning in let's just start with instruction fine tuning. You have like a normal instruction fine tuning data set about code. Then you throw in a lot of questions about code in that repository, um, so you could either get ground truth ones, which might be difficult, or you could do what you kind of hinted at or suggested, using synthetic data, um, ie, kind of having the model uh ask questions about various re pieces of the code, um, so you kind of take the pieces of the code, then prompt the model or have a model propose a question for that piece of code and then add those as instruction, find uni data points and then in theory, this might unlock the models ability to answer questions about that code base. Let me ask you about open ai1. What do you think is the role of that kind of test time compute system in programming? I think test time compute is really, really interesting. So there's been the pre-training regime which will kind of, as you scale up the amount of data and the size of your model, get you better and better performance, both on loss and then on downstream benchmarks, um, and just general performance when we use it for coding or or other tasks. Um, we're starting to hit, uh, a bit of a data wall, meaning it's going to be hard to continue scaling up this regime.

And so scaling up 10 test time compute is an interesting way of now, you know, increasing the number of inference time flops that we use, but still getting like, uh, like, yeah, as you increase the number of flops, use inference time, getting corresponding uh improvements in in the performance of these models. Traditionally we just had to literally train a bigger model that always uses uh, that always used that many more flops. But now we could perhaps use the same siiz model, um and run it for longer to be able to get, uh, an answer at the quality of a much larger model. And so the really interesting thing i like about this is there are some problems that perhaps require 100 trillion parameter model intelligence trained on 100 trillion tokens, um, but that's like maybe 1%, maybe like 0.1% of all queries. So are you going to spend all of this effort, all this compute, training a model, uh that cost that much and then run it so infrequently it feels completely wasteful, when instead you get the model that can, that is, that you train the model that's capable of doing the 99.9% of queries. Then you have a way of inference time running it longer for those few people that really really want max intelligence, how do you figure out which problem requires what level of intelligence? Is that possible to dynamically figure out when to use gpt 4, when to use, like, when to use a small model and when you need the the 01? I mean, yeah, that's, that's an open research problem, certainly, uh, i don't think anyone's actually cracked this model routing problem quite well, uh, we'd like to. We we have like kind of initial implementations of this for things, for something like cursor tab, um, but at the level of like going between 40 sonet to1, uh, it's a bit trickier, perh, like.

There's also a question of like what level of intelligence do you need to determine if the thing is uh too hard for for the, the four level model, maybe you need the 01 level model? Um, it's really unclear, but but you mentioned so there's a, there's, there's a pre-training process, then there's pro post training and then there's like test time compute. That, fair, does sort of separate. Where's the biggest gains? Um, well, it's weird because like test time compute, there's like a whole training strategy needed to get test time compute to work and the really. The other really weird thing about this is no one like outside of the big labs and maybe even just open ai, no one really knows how it works like. There have been some really interesting papers that uh show hints of what they might be doing, and so perhaps they're doing something with research using process reward models. But yeah, i just i think the issue is we don't quite know exactly what it looks like, so it would be hard to kind of comment on like where it fits in. I i would put it in post training, but maybe, like the compute spent for this kind of for getting test time compute to work for a model is going to dwarf pre-training eventually. So we don't even know if 0an is using, just like chain of thought, rl. We don't know how they're using any of these. We don't know anything. It's fun to speculate, like if you were to uh build a competing model, what would you do? Yeah, so one thing to do would be: i i think you probably need to train a process reward model, which is so maybe we can get into reward models and outcome reward models versus process reward models. Outcome reward models are the kind of traditional reward models that people are trained for these for, for language models, language modeling, and it's just looking at the final thing. So if you're doing some math problem, let's look at that final thing. You've done everything and let's assign a grade to it.

How likely we think, uh, like, what's the reward for this, this, this outcome, process reward models? Instead, try to grade the chain of thought and so open ai had some preliminary paper on this, i think, uh last summer, where they use human labelers to get this pretty large, several hundred thousand data set of creating chains of thought, um, um. Ultimately, it feels like i haven't seen anything interesting in the ways that people use process reward models outside of just using it as a means of uh affecting how we choose between a bunch of samples. So, like, what people do uh in all these papers is they sample a bunch of outputs from the language model and then use the process reward models to grade uh, all those generations, alongside maybe some other heuristics and then use that to choose the best answer. The really interesting thing that people think might work and people want to work is tre search with these processor re models, because if you really can grade every single step of the chain of thought, then you can kind of branch out and, you know, explore multiple paths of this chain of thought and then use these process word models to evaluate how good is this branch that you're taking. Yeah, when the, when the quality of the branch is somehow strongly correlated with the quality of the outcome at the very end. So, like you have a good model of knowing which should take. So not just this in the short term and like in the long term. Yeah, and like the interesting work that i think has been done is figuring out how to properly train the process, or the interesting work that has been open- sourced and people i think uh talk about is, uh, how to train the process reward models, um, maybe in a more automated way. Um, i- i could be wrong here- could not be mentioning some papers. I haven't seen anything super uh that seems to work really well for using the process reward models creatively to do tree search and code.

Um, this is kind of an ai safety, maybe a bit of a philosophy question. So open ai says that they're hiding the chain of thought from the user, and they've said that that was a difficult decision to make. They, instead of showing the chain of thought, they're asking the model to summarize the chain of thought. They're also in the background saying they're going to monitor the chain of thought to make sure the model is not trying to manipulate the user, which is a fascinating possibility. But anyway, what do you think about hiding the chain of thought? One consideration for open ai- and this is completely speculative- could be that they want to make it hard for people to distill these capabilities out of their model. It might actually be easier if you had access to that hidden chain of thought, uh, to replicate the technology, um, because that's pretty important data, like seeing, seeing the steps that the model took to get to the final result. So you can probably train on that also. And there was sort of a mirror situation with this with some of the large language model providers, and also this is speculation, but um, some of these apis um used to offer easy access to log probabilities for the tokens that they're generating, um and also log probabilities over the promp tokens, and then some of these apis took those away. Uh, and again, complete speculation, but um, one of the thoughts is that the the reason those were taken away is if you have access to log probabilities, um, similar to this hidden train of thought, that can give you even more information to to try and distill these capabilities out of the apis, out of these biggest models, into models you control. As an asteris on also the the previous discussion about uh, us integrating 01, i think that we're still learning how to use this model. So we made o1 available in cursor because, like we were when we got the model, we were really interested in trying it out.

I think a lot of programmers are going to be interested in trying it out. But um, uh 01 is not part of the default cursor experience in any way up um and we still haven't found a way to yet integrate it into an editor, in uh, into the editor in a way that we, we, we reach for sort of, you know, every hour, maybe even every day, and so i think that the jury's still out on how to, how to use the model um and uh i. we haven't seen examples yet of of people releasing things where it seems really clear like, oh, that's, that's like now the use case, um, the obvious one to to turn to is: maybe this can make it easier for you to have these background things running right, to have these models in loops, to have these models be atic um, but we're still um, still discovering. To be clear, we have ideas, we just need to, we need to try and get something incredibly useful before we we put it out there. But it has these significant limitations, like, even like barring capabilities. Uh, it does not stream and that means it's really, really painful to use for things where you want to supervise the output um and instead you're just waiting for the wall text to show up um. Also, it does feel like the early innings of test time computing search, where it's just like a very, very much of v, zero, um and there's so many things that like like don't feel quite right and i suspect um in parallel to people increasing, uh the amount of pre-training data and the size of the models and pre-training and finding tricks there, you'll now have this other thread of getting search to work better and better. So let me ask you about strawberry tomorrow eyes. So it looks like github um co-pilot might be integrating 01 in some kind of way, and i think some of the comments are saying this: this mean cursor is done. I think i saw one comment saying that i saw time to shut down cursory- time to shut down cursor.

So is it time to shut down cursor? I think this space is a little bit different from past software spaces over the, the 2010s um, where i think that the ceiling here is really really really incredibly high and so i think that the best product in 3 to four years will just be so much more useful than the best product today and you can like wax potic about moes this and brand that, and you know this is our uh advantage. But i think, in the end, just if you don't have like, if you stop innovating on the product, you will, you will lose, and that's also great for startups, um, that's great for people trying to to enter this market, um, because it means you have an opportunity, um to win against people who have, you know, lots of users already by just building something better, um, and so i think, yeah, over the next few years, it's just about building the best product, building the best system, and that both comes down to the modeling engine side of things and it also comes down to the, to the editing experience. Yeah, i think most of the additional value from cursor versus everything else out there is not just integrating the new model fast, like o1. It comes from all of the kind of depth that goes into these custom models that you don't realize are working for you, in kind of every facet of the product, as well as, like the really uh, thoughtful ux with every single feature. All right, uh, from that profound answer, let's descend back down to the technical you mentioned. You have a taxonomy of synthetic data. Oh, yeah, uh, can you please explain? Yeah, i think, uh, there are three main kinds of synthetic data. The first is so? So what is synthetic data? First? So there's normal data, like non- synthetic data, which is just data that's naturally created, ie, usually it'll be from humans having done things. So, uh, from some human process you get this data.

Synthetic data, uh, the first one would be distillation, so having a language model, kind of output tokens or probability distributions over tokens, um, and then you can train some less capable model on this. Uh, this approach is not going to get you a net like more capable model than the original one that has produced the tokens um, but it's really useful, for if there's some capability you want to elicit from some really expensive high latency model, you can then that distill that down into some smaller task specific model, um. The second kind is when, like, one direction of the problem is easier than the reverse, and so a great example of this is bug detection, like we mentioned earlier, where it's a lot easier to introduce reasonable looking bugs than it is to actually detect them, and this is- this is probably the case for humans too- um, and so what you can do is you can get a model that's not training that much data, that's not that smart to introduce a bunch of bugs and code, and then you can use that to then train, use a synthetic data to train a model that can be really good at detecting bugs. Um, the last category, i think, is, i guess, the main one that it feels like the big labs are doing for synthetic data, which is, um, producing texts with language models that can then be verified easily. Um, so, like you know, extreme example of this is if you have a verification system that can detect if language is shakespeare level, and then you have a bunch of monkeys typing and typewriters, like you can eventually get enough training data to train a shakespeare level language model. And i mean this is the case, like very much the case for math, where verification is is is actually really really easy for formal, um, formal language, and then what you can do is you can have an okay model, uh, generate a ton of roll outs and then choose the ones that you know have actually proved the ground truth theorems and train that further.

Uh, there's similar things you can do for code with leode, like problems, or uh, where, if you have some set of tests that you know correspond to, if, if something passes these tests, it has actually solved a problem, you could do the same thing where we verify that it's passed the test and then train the model, the outputs that have passed the tests. Um, i think, i think it's going to be a little tricky getting this to work in all domains. Or just in general, like having the perfect verifier feels really, really hard to do with, just like open-ended, miscellaneous tasks you give the model, or more like long horizon tasks, even in coding. That's cuz you're not as optimistic as arvid, but yeah, uh, so, yeah, so that that that third category requires having a verifier. Yeah, verification is it feels like it's best when you know for a fact that it's correct and like then, like it wouldn't be like using a language model to verify, it would be using tests or uh, formal systems or running the thing too, doing like the human form of verification where you just do manual quality control. Yeah, yeah, but like the, the language model version of that, where it's like running the thing it's actually understands. Yeah, but yeah, no, that's sort of somewhere between yeah, yeah, i think that that's the category that is um most likely to to result in like massive gains. What about rl with feedback side, rhf versus rl if, um, what's the role of that in um getting better performance on the models. Yeah, so rhf is when the reward model you use uh is trained from some labels you've collected from humans giving feedback. Um, i think this works if you have the ability to get a ton of human feedback for this kind of task that you care about. R r aif is interesting uh, because you're kind of depending on like this is actually kind of uh going to.

It's depending on the constraint that verification is actually a decent bit easier than generation, because it feels like okay, like what are you doing? You're using this language model to look at the language model outputs and then improve the language model. But no, it actually may work. If the language model uh has a much easier time verifying some solution uh than it does generating it, then you actually could perhaps get this kind of recursively, but i don't think it's going to look exactly like that. Um the other, the other thing you could do is that we kind of do is like a little bit of a mix of rif and rhf, where usually the model is actually quite correct, and this is in the case of cursor tab at, at picking uh between like two possible generations of what is what is what is the better one, and then it just needs, like a hand, a little bit of human nudging with only, like on the, on the order of 50, 100 uh examples, um, to like kind of align that prior the model has with exactly with what, what you want. It looks different than, i think, normal rf. We usually usually training these reward models in tons of examples. What? What's your intuition when you compare generation and verification, or generation and ranking is? Is ranking way easier than generation? My intuition would just say, yeah, it should be like. This is kind of going going back to like, if you, if you believe p does not equal np, then there's this massive class of problems that are much, much easier to verify given a proof than actually proving it. I wonder if the same thing will prove p not equal to np or p equal to np. That would be, that would be really cool. That'd be a whatever fields metal by ai. Who gets the credit? Another open philosophical question: i'm, i'm, i'm actually surprisingly curious. What, what, what, like a good betat for one uh, one a will get the fields medal will be. Actually don't.

Is this mon specialty? Uh, i, i don't know what a mon's bed here is, oh sorry, nobel prize or fields medal? First f metal, fields metal, level, feld metal. I think fields metal comes first. Well, you would say that, of course, but it's also this like isolated system you can verify and no sure, like i don't even know if i you don't need to do have much more. I felt like the path to get to imo was a little bit more clear, because it already could get a few imo problems and there are a bunch of like, there's a bunch of lwh hang fruit, given the literature at the time of like, what, what tactics people could take. I think i'm one much less first in the space of the improving now and to, yeah, less intuition about how close we are to solving these really, really hard, open problems. So you think you'll be feels mod first. It won't be like in u physics or in oh, 100%, i think. I, i think i think that's probably more likely. Like it's probably much more likely that it'll get in. Yeah, yeah, yeah. Well, i think it goes to like, i don't know, like bsd, which is a bird when turn di conjecture, like remon hypothesis or any one of these like hard, hard math problems which just like actually really hard. It's sort of unclear what the path to to get even a solution looks like like we. We don't even know what a path looks like, let alone um, and you don't buy the idea that this is like an isolated system and you can actually you have a good reward system and, uh, it feels like it's easier to train for that. I think we might get fields metal before agi. I think i mean i'd be very happy, be very happy, but i don't know if i. i think 202h 2030 feels metal, feels metal, all right, it's uh, it feels like forever from now, given how fast things have been going. Um, speaking of how fast things have been going, let's talk about scaling laws. So, for people who don't know, uh, maybe it's good to talk about this whole uh idea of scaling laws.

What are they? Where do things stand and where do you think things are going? I think it was interesting. The original scaling laws paper by open ai was slightly wrong because i think of some uh issues they did with uh learning right schedules, uh, and then chinchilla showed a more correct version and then from then, people have again kind of deviated from doing the computer optimal thing because people, people start now optimizing more. So for uh making the thing work really well given a given an inference budget and i think there are a lot more dimensions to these curves than what we originally used of just compute number of uh parameters and data. Like inference compute is is the obvious one. I think context length is another obvious one. So if you care, like, let's say, you care about the two things of inference compute and and then uh context window, maybe the thing you want to train is some kind of ssm because they're much, much cheaper and faster at super, super long context and even if maybe it is 10x wor scaling properties during training- meaning you have to spend 10x more compute to train the thing to get the same same level of capabilities- um, it's worth it because you care most about that inference budget for really long context windows. So it'll be interesting to see how people kind of play with all these dimensions. So yeah, i mean you speak to the multiple dimensions. Obviously the original conception was just looking at the variables of the size of the model as measured by parameters and the size of the data as measured by the number of tokens, and looking at the ratio of the two. Yeah, and it's it's kind of a compelling notion that there is a number or at least a minimum and it seems like one was emerging. Um, do you still believe that there is a kind of bigger is better? I mean, i think bigger is certainly better for just raw performance and raw intelligence and raw intelligence.

I think the the path that people might take is: i'm particularly bullish on distillation and like yeah, how many knobs can you turn to if we spend like a ton ton of money on training, like get the most capable uh cheap model, right, like really, really caring as much as you can because, like the, the, the naive version of caring as much as you can about inference time compu is what people have already done with. Like the llama models are just overtraining the out of 7b models. Um, on way, way, way more tokens than isal optimal, right. But if you really care about it, maybe thing to do is what gemma did, which is let's just not, let's not just train on tokens, let's literally train on uh minim, minimizing the k divergence with uh, the distribution of gemma 27b, right. So knowledge distillation there, um, and you're spending the compute of literally training this 27 billion model, uh billion parameter model on all these tokens just to get out this- i don't know- smaller model and the distillation gives just a faster model. Smaller means faster. Yeah, distillation in theory is, um, i think, getting out more signal from the data that you're training on, and it's like another. It's, it's perhaps another way of getting over, not like completely over, but like partially helping with the data wall where, like you, only have so much data to train on. Let's like train this really, really big model on all these tokens and we'll distill it into this smaller one and maybe we can get more signal, uh per token, uh for this, for this much smaller model, than we would have originally if we trained it. So, if i gave you1 trillion, how would you? How would you spend it? I mean, you can't buy an island or whatever- um, how would you allocate it in terms of improving the, the big model, versus maybe paying for hf in the rhf or? Yeah, i think there's a lot of these secrets and details about training these large models that i, i, i just don't know and are only priv to the large labs.

And the issue is, i would waste a lot of that money if i even attempted this, because i wouldn't know those things. Uh, suspending a lot of disbelief and assuming, like you, had the knowhow um and operate, or, or if you're saying, like, you have to operate with, like, the, the limited information you have, now, no, no, no, actually i would say you swoop in and you get all the information, all the little characteristics, all the little parameters, all the, all the parameters that define how the thing is trained. Mhm, if we look, and how to invest money for the next 5 years in terms of maximizing what you called raw intelligence, i mean, isn't the answer like really simple? You just, you just try to get as much compute as possible, like, like. At the end of the day, all all you need to buy is the gpus and then the researchers can find, find all the all like they, they can sort of you, you can tune whether you want between a big model or a small model, like. Well, this gets into the question of like. Are you really limited by compute and money or are you limited by these other things? And i'm more pr to arvid's, arvid's belief that we're- we're sort of ideal limited. But there's always that like. But if you have a lot of computes, you can run a lot of experiments. So you would run a lot of experiments versus like. Use that compute to train a gigantic model? I would, but i i do believe that we are limited in terms of ideas that we have. I think yeah, because even with all this compute and, like you know, all the data you could collect in the world, than you really are ultimately limited by not even ideas, but just like really good engineering. Like even with all the capital in the world would you really be able to assemble? Like there aren't that many people in the world who really can like make the difference here, um, and, and there's so much work that goes into research that is just like pure, really, really hard engineering work.

Um, as like a very kind of handwavy example, if you look at the original transformer paper, you know how much work was kind of joining together a lot of these really interesting concepts embedded in the literature, versus then going in and writing all the code, like maybe the cuda kernels, maybe whatever else. I don't know if it ran on gpus or tpus originally such that it actually saturated the gp gpu performance right. Getting gomes here to go in and do do all this code right and nome is like probably one of the best engineers in the world. Or maybe going a step further, like the next generation of models, having these things like getting model paralis to work and scaling it on, like you know, thousands of or maybe tens of thousands of, like v100s, which i think gbd3 may have been, um, there's just so much engineering effort that has to go into all of these things to make it work. Um, if you really brought that cost down to, like you know, maybe not zero, but just made it 10x easier, made it super easy for someone with really fantastic ideas to immediately get to the version of, like the new architecture they dreamed up- that is, like getting 50, 40% uh utilization on the gpus- i think that would just speed up research by a ton. I mean, i think. I think if, if you see a clear path to improvement, you you should always sort of take the low hanging fruit first, right, and i think probably open eye and and all the other labs, it did the right thing to pick off the low hanging fruit. Where the low hanging fruit is, like sort of you you could scale up to a gp 24.

25 scale um, and and you just keep scaling and and like things, things keep getting better and as long as, like you, there's there's no point of experimenting with new ideas when, like everything, everything is working and you should sort of bang on and try, try to get as much as much juice out as the possible and then and then, maybe, maybe, when you really need new ideas- for i think i think if you're, if you're spending $10 trillion, you probably want to spend some, you know- then actually like reevaluate your ideas, like probably your idea limited, at that point, i think all of us believe new ideas are probably needed to get you know, all the way way there to ai, and all of us also probably believe there exist ways of testing out those ideas at smaller scales, um, and being fairly confident that they'll play out. It's just quite difficult for the labs in their current position to dedicate their very limited research and engineering talent to exploring all these other ideas when there's, like, this core thing that will probably improve performance. Um, for some like decent amount of time, yeah, but also these big labs like winning, so they're just going wild, okay. So how, uh? Big question, looking out into the future, you're now at the, the center of the programming world. How do you think programming, the nature programming, changes in the next few months, in the next year, in the next two years, the next 5 years, 10 years? I think we're really excited about a future where the programmer is in the driver's seat for a long time- and you've heard us talk about this a little bit- but one that emphasizes speed and agency for the programmer and control, the ability to modify anything you want to modify, the ability to iterate really fast on what you're building.

And this is a little different, i think, than where some people um are, are jumping to uh in the space, where i think one idea that's captivated people is: can you talk to your um computer, can you have it build software for you as if you're talking to like an engineering department or an engineer over slack, and can it just be this, this sort of isolated text box and um? Part of the reason we're not excited about that is, you know, some of the stuff we've talked about with latency, but then a big piece. A reason we're not excited about that is because that comes with giving up a lot of control. It's much harder to be really specific when you're talking in the text box and, um, if you're necessarily just going to communicate with a thing, like you would be communicating with an engineering department, you're actually abdicating tons of tons of really important decisions um to the spot um, and this kind of gets at fundamentally what engineering is um. I think that some, some people who are a little bit more removed from engineering might think of it as you know, the spec is completely written out and then the engineers just come and they just implement and it's just about making the thing happen in code and making the thing um exists um. But i think a lot of the the best engineering, the engineering we enjoy um involves tons of tiny micro decisions about what exactly you're building and about really hard trade-offs between you know speed and cost and all the other uh things involved in a system and uh, we want, as long as humans are actually the ones making you know designing the software and the ones um specifying what they want to be built, and it's not just like company run by all ais, we think you'll really want the humor- the human in a driver seat um dictating these decisions. And so there's the jury still out on kind of what that looks like.

I think that you know one weird idea for what that could look like is it could look like you kind of you can control the level of abstraction you view a codebase at and you can point at specific parts of a codebase that um like, maybe you digest a code base by looking at it in the form of pseudo code and um, you can actually edit that pseudo code too and then have changes get made down at the the sort of formal programming level and you keep the like. You know you can gestat any piece of logic, uh, in your software component of programming. You keep the inflow text editing component of programming. You keep the control of. You can even go down into the code, you can go at higher levels of abstraction while also giving you these big productivity gains. It would be nice if you can go up and down the the abstraction stack. Yeah, and there are a lot of details to figure out there. That's sort of a fuzzy idea. Time will tell if it actually works. But these, these principles of, of control and speed in the human and the driver seat, we think are really important. Um, we think for some things, like arvid mentioned before, for some styles of programming you can kind of hand it off chapot style, you know, if you have a bug, that's really well specified. But that's not most of programming and that's also not most of the programming we think a lot of people value. Uh, what about, like, the fundamental skill of programming? There's a lot of people, like young people right now, kind of scared like thinking because they like, love programming, but they're scared about like: will i be able to have a future if i pursue this career path? Do you think the very skill of programming will change fundamentally? I actually think this is a really, really exciting time to be building software.

Yeah, like, we remember what programming was like in, you know, 2013, 2012, whatever it was, um, and there was just so much more cru and boilerplate and, and you know, looking up something really gnarly, and you know that stuff still exists. It's definitely not at zero, but programming today is way more fun than back then. Um, it's like we're really getting down to the, the delight, concentration and all all the things that really draw people to programming, like, for instance, this element of being able to build things really fast and um speed and also individual control- like all those are just being turned up a ton um, and so i think it's just going to be. I think it's going to be a really really fun time for people who build software. Um, i think that the skills will probably change too. I i think that people's taste and creative ideas will be magnified, and it will be less about- maybe less a little bit about- boilerplate text editing, maybe even a little bit less about carefulness, which i think is really important today. If you're a programmer, i think it'll be a lot more fun. What do you guys think? I agree i'm. I'm very excited to be able to change like just what one thing that that happened recently was like we wanted to do a relatively big migration to our codebase. We were using async local storage in in no js, which is known to be not very performant, and we wanted to migrate to our context object. And this is a big migration. It affects the entire code base and swall, and i spent i don't know five days, uh, working through this, even with today's ai tools, and i am really excited for a future where i can just show a couple of examples and then the ai applies that to all of the locations and then it highlights: oh this is a new example, like what should i do? And then i show exactly what to do there, and then that can be done in like 10 minutes, uh, and then you can iterate much, much faster. Then you can.

Then you don't have to think as much up front and stay, stand at the blackboard and like think exactly like, how are we going to do this? Because the cost is so high. But you can just try something first and you realize, oh, this is not actually exactly what i want, and then you can change it instantly again after and so, yeah, i think being a programmer in the future is going to be a lot of fun. Yeah, i, i really like that point about it feels like a lot of the time with programming there are two ways you can go about it. One is like you think really hard, carefully, upfront, about the best possible way to do it and then you spend your limited time of engineering to actually implement it. Uh, but i much prefer just getting in the code and, like you know, taking a crack at seeing how it, how, how it kind of lays out, and then iterating really quickly on that. That feels more fun. Um, yeah, like just speaking to generating the boiler plate is great. So you just focus on the difficult design, nuanced, difficult design decisions, migration- i feel like this is this is a cool one. Like it seems like large language models able to basically translate from one programm language to another, or like translate, like migrate in the general sense of what migrate is, um, but that's in the current moment. So i mean the fear has to do with like okay, as these models get better and better, then you're doing less and less creative decisions and is it going to kind of move to a place where it's uh, you're operating in the design space of natural language, where natural language is the main programming language, and i guess i could ask that by way of advice, like if somebody's interested in programming now, what do you think they should learn? Like to say, you guys started in some java and, uh, i forget the.

Oh, some php, php, objective c, objective c, there you go, um, i mean, in the end we all know javascript is going to win, uh, and not typescript, it's just, it's going to be like vanilla javascript, it's just going to eat the world and maybe a little bit of php. And i mean it also brings up the question of like i think don can has a this idea that some per of the population is geeks, and like there's a particular kind of psychology in mind required for programming and it feels like more and more that's expands. The kind of person that should be able to can do great programming might expand. I think different people do programming for different reasons, but i think the true, maybe like the best programmers, um, are the ones that really love, just like, absolutely love, programming. For example, there folks in our team who literally when they're they get back from work, they go and then they boot up cursor and then they start coding on their side projects for the entire night and they stay till 3:00 am doing that, um, and when they're sad, they they said: i just really need to code and i i i think, like you know there's, there's that level of programmer where, like this obsession and love of programming, um, i think makes really the best programmers and i think the these types of people will really get into the details of how things work. I guess the question i'm asking that exact program. I think about that person. When you're, when the super tab, the super awesome praise be the tab is- succeeds, you keep pr pressing tab, that person in the team loves to cursor tab more than anybody else, right, yeah, and it's also not just like like pressing tab is like the just pressing tab. That's like the easy way to say it in the the catch catchphrase. You know, uh, but what you're actually doing when you're pressing tab is that you're you're injecting intent, uh, all the time. While you're doing it, you're, you're, uh, sometimes you're rejecting it.

Sometimes you're typing a few more characters, um, and, and that's the way that you're, um, you're sort of shaping the things that's being created and i, i think programming will change a lot to just what is it that you want to make? It's sort of higher bandwidth. The communication to the computer just becomes higher and higher bandwidth as opposed to like, like, just typing is much lower bandwidth than than communicating intent. I mean this goes to your uh manifesto titled engineering genius. We are an applied research lab building extraordinary productive human ai systems. So, speaking to this like hybrid element, mhm, uh, to start, we're building the engineer of the future, a human ai programmer that's an order of magnitude more effective than any one engineer. This hybrid engineer will have effortless control over their code base and no low entropy keystrokes. They will iterate at the speed of their judgment, even in the most complex systems. Using a combination of ai and human ingenuity, they will outsmart and out engineer the best pure ai systems. We are a group of researchers and engineers. We build software and models to invent at the edge of what's useful and what's possible. Our work has already improved the lives of hundreds of thousands of program and, on the way to that, will at least make programming more fun. So thank you for talking today. Thank you, thanks for having us, thank you, thank you thanks for listening to this conversation with michael swall, arvid and aman to support this podcast. Please check out our sponsors in the description. And now let me leave you with a random, funny and perhaps profound programming code i saw on reddit. Nothing is as permanent as a temporary solution that works. Thank you for listening and hope to see you next time.